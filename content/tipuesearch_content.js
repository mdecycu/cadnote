var tipuesearch = {"pages": [{'title': 'About', 'text': 'https://mde.tw/cadnote , 若 s1511 伺服器提供服務, 經由 IPv6 可連線  https://s1511.cycu.org/~pj2022/cadnote . \n 這是國立虎尾科技大學 (National Formosa University, Taiwan) 機械設計工程系大二電腦輔助設計與實習課堂筆記網站，本課程承接大一的計算機程式，並為隨後協同産品設計課程提供必要的零組件設計繪圖與 Web-based 機電系統模擬基礎。 \n 課程內容將包含機電整合範例系統中 3D 零組件的電腦輔助設計繪圖，以及實體模型製作之前所需的機電控制系統設計與模擬。 \n 電腦輔助設計繪圖將採用可在 Windows 操作系統中可㩦運作的 Siemens Solid Edge 與 Solvespace，業界普遍採用的 Dassault Solidworks 與 Siemens NX，以及能直接在 PC Web Browser 及手機或平板 App 中使用的 Onshape。 \n 控制系統設計將採用最簡單的 PID 自動控制流程，並配合將 3D 零組件模型導入 Coppeliasim，以 Python ZeroMQ Remote API 程式跨網路進行控制後，再利用 Websocket 將機電系統控制與模擬結果，呈現於 PC 、平板或手機的 Web Browser 上，以便在之後的協同産品設計課程中進行應用。 \n', 'tags': '', 'url': 'About.html'}, {'title': '上課內容', 'text': '教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \xa0 \n 2a cad2023 學員網站與倉儲連結 \n ag1  ( repo ) \n ag2  ( repo ) \n ag3  ( repo ) \n ag4  ( repo ) \n ag5  ( repo ) \n ag6  ( repo ) \n 2b cad2023 學員網站與倉儲連結 \n bg1  ( repo ) \n bg2  ( repo ) \n bg3  ( repo ) \n bg4  ( repo ) \n bg5  ( repo ) \n bg6 \xa0( repo ) \n 學員展示用 IPv6 位址: \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 班級名單序號 \n \n 112 學年度第一學期 (2023 Fall) 機械設計工程系 -  電腦輔助設計與實習 課程的上課內容與進度. \n \n 首先說明 課程評分方式 \n Teaching Methods (教學方法): \n \n lectures (講課) \n instruction (導引) \n projects (專案) \n self-study (自學) \n \n 第一階段任務: \n 手機建議安裝以下 Apps: \n ChatGPT, Github mobile, Replit, Authy, Teams, Onshape \n 各 Apps 的功能與目的: \n 本課程允許學員從 ChatGPT 以 GPT-3.5 preview 對話過程取出內容, 納入個人與作業網站中. \n 手機上的 Github mobile App 可用於 Github 帳號中的 2FA 流程, 幫助 Github 阻絕不當的 robot 濫用. \n Replit App 則可讓學員利用手機 Run 倉儲網站, 並以手機或平板瀏覽器管理較少量的網站編輯. \n Authy App 允許使用者利用手機或數位手錶取得 2FA 登入流程所需的 verification code. \n Teams App 可以讓學員利用手機參與 Microsoft 線上團隊課程. \n Onshape App 則可讓使用者利用手機或平面檢視或修改協同產品設計流程中的零組件. \n \n 完成本節中的各項任務後, 表示你將可以登入: \n \n 學校 email 帳號郵箱 \n 個人Gmail 帳號郵箱 \n Replit IDE 系統 (以 個人Gmail 帳號登入) \n 個人 Github 系統 \n 以學校 email 帳號設定的 Onedrive 系統 \n \n 登入學校 Email 郵箱: \n 學校 Webmail:  https://mail.nfu.edu.tw  (帳號為: 學號@nfu.edu.tw, 用來通知  http://s1511.cycu.org \xa0 主機上的帳號密碼與學期成績) \n 申請或登入 Gmail: \n 假如尚未擁有 Gmail 帳號, 請自行 申請一個 Gmail 帳號 , 可用來 登入 Replit  線上 IDE 系統. \n 使用 Replit 免費帳號管理 Github 倉儲網站時, 必須確認 Replit 所屬伺服器是在開啟狀態, 最佳使用流程是在任一 Web-based 流程儲存網頁內容時, 先將內容複製到近端電腦 (即將欲存檔的頁面 html 暫存至電腦緩衝區), 之後再執行網際存檔, 以避免丟失資料 (Replit 免費帳號可能在使用者編輯網頁過程重新啟動伺服器). \n 申請 Github 帳號: \n 已經有 Github 帳號者, 請以既有帳號登入, 並在 Github 全面要求使用 2FA (Two Factor Authentication) 之前, 完成設定. \n 尚未擁有 Github 帳號者, 請利用"學號@nfu.edu.tw"在 Github  註冊 一個帳號, 帳號名稱可以選擇 學號 , 或者用 英文姓名的三個字母縮寫加上學號 作為 Github 帳號. 帳號建立後必須進入  https://mail.nfu.edu.tw  回覆確認信件後, 才能開始使用 Github. \n 設定 Github 帳號的 2FA 認證: \n 由於 Github 要求所有用戶在 2023 年底之前要使用 2FA 認證方式登入, 使用者可以在手機中先安裝 Github Mobile App, 假如只希望利用手機取得 2FA token (六個阿拉伯數字) 則可以在手機中安裝 Google Authenticator App, 若也希望利用 Apple Watch 取得 2FA token, 則可以在手機中安裝 Authy App. \n 將 Github 帳號登入所需的 2FA 認證設定於手機的 Google Authenticator 或 Authy 的流程為: \n 1. 登入 Github 後, 進入帳號 Settings - Password and authentication - Two-factor authentication 下, 若此時手機已經安裝 Github Mobile App, 且以 Github 帳號登入, 則 Preferred 2FA methods 選項中將會顯示 Github Mobile, 表示此時啟動 2FA 認證流程, 則使用者登入 Github 時, 除了必須輸入帳號密碼外, 還需要在手機的 Github Mobile App 中確認同意該使用者登入 Github, 系統才會允許登入. \n 2. 接下來, 在 Two-factor methods 下點選 Authenticator app 右方的 Add (若要變更手機所使用的 2FA token 產生程式, 則點選 Edit), 視窗中將會出現一組二維條碼, 使用者可以利用手機開啟 Google Authenticator 或 Authy 中的 account add 功能開啟相機拍二維條碼後, 將 Github 帳號登錄至手機認證套件中. \n 3. 一旦上述 Github 帳號在手機中的 2FA 認證設定完成, 使用者可以將前述內建為 Github Mobile 的 Preferred 2FA methods 改為 Authenticator app, 之後再登入 Github, 除了必須輸入對應的帳號密碼之外, 還需要輸入在特定時段內輸入手機或手錶中對應帳號所顯示的六個數字 (即 2FA token), 才能登入 Github. \n 4. 至於手機中的 Authenticator 也可以再利用 Pin 密碼、指紋或人臉辨識流程加入安全保護, 一旦手機或手錶毀損, 就可以藉以登入 Github 帳號修改設定. \n Github 帳號在電腦輔助設計與實習課程中的用途: \n \n 領取  Github Classroom  系統所指定的作業 ,\xa0為了整合 Replit, 本課程將放棄使用 Github Classroom , 因為 GitHub Classroom 作業倉儲的使用與 Replit 的結合應用流程, 將加重管理者的負擔, 因此本課程的評分網站將改由學員自行在 GitHub 帳號下, 建立名稱為 cad2023 的評分倉儲, 且透過 GitHub Pages 伺服器呈現網站內容. \n 建立個人網站:  https://github_帳號.github.io \n 將電腦輔助設計與實習課程中所編寫的程式與相關資料存入 Github 帳號下的 Gist \n \n 在 Github 中, 若需要將所建立的倉儲以 Github Pages 功能轉為網站, 可以在建立倉儲時, 以  https://github.com/mdecycu/cmsite  作為 template, 首先學習如何利用 Replit 維護網站內容, 隨後則可利用 s1511 伺服器中的帳號進行 Github 倉儲與網站內容的維護, 最後也可以在近端可攜程式環境中維護 Github 倉儲與網站內容. \n 利用 Github 建立個人網站 (透過  Github Pages ) 有以下目標: \n \n 可在網站中自我介紹 ( https://www.betterup.com/blog/how-to-introduce-yourself ) \n 可在網站中展示並介紹自己寫過的程式 \n 可在網站中簡介自己修過的課程內容 \n 可在網站中說明自己曾經參與過的專題 \n 可在網站中介紹自己未來的生涯規劃 \n \n 申請 onedrive 帳號: \n \n 登入學校郵箱 (用來收帳號建立確認信) \n 尚未建立 @nfu 對應教育版帳號者, 請至  https://www.microsoft.com/zh-tw/education/products/office , 以 學號@nfu.edu.tw 帳號申請 OneDrive 帳號. \n \n onedrive 帳號在電腦輔助設計與實習課程中的用途: \n \n 擁有線上 5TB 的儲存空間, 可用來儲存個人所建立的流程操作 mp4 影片, 並嵌入個人網頁或作業網站中 \n 擁有線上 5TB 的儲存空間, 可用來儲存與課程相關的 教育版授權軟體  (例如:  Windows 10 64位元 22H2.4 ,  Windows 11 64位元 22H2.6 ,  windows_kms.bat ) 或可攜程式系統檔案與 電子書 \n 登入後可參與電腦輔助設計與實習課程 Teams (CAD2023 MS Teams 代碼為: fnueb56) \n 登入後可下載電腦輔助設計與實習課程網站中的相關檔案 (下載連結將公布在 Teams) \n \n 可攜程式環境: \n basic_portable_python.7z  (下載 15MB, 解開後 55MB) \n 下載  Portable_2023_fall_1.3g_5g.7z  (需要下載密碼) \n 也可以直接使用電腦輔助設計室中 C:\\Portable_2023_fall 目錄中的檔案 \n 下載  se_portable_X_for_cad2023.7z  (需要下載密碼) \n 電腦輔助設計套件: \n 全雲端:  https://www.onshape.com/en/  (課程協同帳號: course At mde dot tw) \n AutoDesk (USA): Inventor and Fusion 360 \n Dassault Systems (France): SolidWorks and CATIA \n Siemens (Germany): Solid Edge and NX \n PTC (USA): Creo and Onshape \n Solvespace:  https://github.com/solvespace/solvespace ,  Forum \n 機電資模擬套件: \n CoppeliaSim:  https://www.coppeliarobotics.com/ ,  https://github.com/CoppeliaRobotics \n 下載  CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需要下載密碼) \n CoppeliaSim 使用者手冊 ,  CoppeliaSim 4.3.0 使用手冊網站 \n Webots:  https://cyberbotics.com/ ,  https://webots.cloud/ \n Robotics: \n RoboDK:  https://robodk.com/ ,  robodk  and  robolink  (integrated into robodk),  https://www.parallemic.org/RoKiSim.html \xa0 \n Robot report podcast:  https://soundcloud.com/robot-report-podcast \n References: \n http://wcm.cycu.org:88/github/  (只能在機械設計系 IPv6 網段連結)', 'tags': '', 'url': '上課內容.html'}, {'title': 'links', 'text': '2a: \n https://github.com/mdecycu/studlist/blob/main/2023fall/2a.txt \n 電腦輔助設計與實習課程分組網站在 s.cycu.org 所分配的外部與內部埠號: \n cad2023_ag1: 8232, 9232 \n cad2023_ag2: 8233, 9233 \n cad2023_ag3: 8234, 9234 \n cad2023_ag4: 8235, 9235 \n cad2023_ag5: 8236, 9236 \n cad2023_ag6: 8237, 9237 \n 2a:  0838  (教務主機登錄學員名單) \n ag1  ( repo ) \n ag2  ( repo ) \n ag3  ( repo ) \n ag4  ( repo ) \n ag5  ( repo ) \n ag6  ( repo ) \n 2a 學員固定 IPv6 位址: \n 2001:288:6004:17:2023:cada::班級名單序號 \n 40923118 \xa0( repo ) 序號:\xa0 1 40923124 \xa0( repo ) 序號:\xa0 2 40923127 \xa0( repo ) 序號:\xa0 3 40923139 \xa0( repo ) 序號:\xa0 4 40923213 \xa0( repo ) 序號:\xa0 5 41023134 \xa0( repo ) 序號:\xa0 6 41023155 \xa0( repo ) 序號:\xa0 7 41023156 \xa0( repo ) 序號:\xa0 8 41023238 \xa0( repo ) 序號:\xa0 9 41023245 \xa0( repo ) 序號:\xa0 10 41023246 \xa0( repo ) 序號:\xa0 11 41036114 \xa0( repo ) 序號:\xa0 12 41123101 \xa0( repo ) 序號:\xa0 13 41123102 \xa0( repo ) 序號:\xa0 14 41123105 \xa0( repo ) 序號:\xa0 15 41123107 \xa0( repo ) 序號:\xa0 16 41123108 \xa0( repo ) 序號:\xa0 17 41123111 \xa0( repo ) 序號:\xa0 18 41123112 \xa0( repo ) 序號:\xa0 19 41123114 \xa0( repo ) 序號:\xa0 20 41123115 \xa0( repo ) 序號:\xa0 21 41123116 \xa0( repo ) 序號:\xa0 22 41123117 \xa0( repo ) 序號:\xa0 23 41123119 \xa0( repo ) 序號:\xa0 24 41123120 \xa0( repo ) 序號:\xa0 25 41123122 \xa0( repo ) 序號:\xa0 26 41123123 \xa0( repo ) 序號:\xa0 27 41123124 \xa0( repo ) 序號:\xa0 28 41123126 \xa0( repo ) 序號:\xa0 29 41123128 \xa0( repo ) 序號:\xa0 30 41123129 \xa0( repo ) 序號:\xa0 31 41123130 \xa0( repo ) 序號:\xa0 32 41123131 \xa0( repo ) 序號:\xa0 33 41123133 \xa0( repo ) 序號:\xa0 34 41123134 \xa0( repo ) 序號:\xa0 35 41123135 \xa0( repo ) 序號:\xa0 36 41123136 \xa0( repo ) 序號:\xa0 37 41123137 \xa0( repo ) 序號:\xa0 38 41123138 \xa0( repo ) 序號:\xa0 39 41123139 \xa0( repo ) 序號:\xa0 40 41123140 \xa0( repo ) 序號:\xa0 41 41123141 \xa0( repo ) 序號:\xa0 42 41123142 \xa0( repo ) 序號:\xa0 43 41123143 \xa0( repo ) 序號:\xa0 44 41123144 \xa0( repo ) 序號:\xa0 45 41123145 \xa0( repo ) 序號:\xa0 46 41123146 \xa0( repo ) 序號:\xa0 47 41123148 \xa0( repo ) 序號:\xa0 48 41123149 \xa0( repo ) 序號:\xa0 49 41123150 \xa0( repo ) 序號:\xa0 50 41123152 \xa0( repo ) 序號:\xa0 51 41123153 \xa0( repo ) 序號:\xa0 52 41123154 \xa0( repo ) 序號:\xa0 53 41136113 \xa0( repo ) 序號:\xa0 54 41136123 \xa0( repo ) 序號:\xa0 55 \n \n 2b: \n https://github.com/mdecycu/studlist/blob/main/2023fall/2b.txt \n 電腦輔助設計與實習課程分組網站在 s.cycu.org 所分配的外部與內部埠號: \n cad2023_bg1: 8238, 9238 \n cad2023_bg2: 8239, 9239 \n cad2023_bg3: 8240, 9240 \n cad2023_bg4: 8241, 9241 \n cad2023_bg5: 8242, 9242 \n cad2023_bg6: 8243, 9243 \n 2b:  0851  (教務主機登錄學員名單) \n bg1  ( repo ) \n bg2  ( repo ) \n bg3  ( repo ) \n bg4  ( repo ) \n bg5  ( repo ) \n bg6  ( repo ) \n 2b 學員固定 IPv6 位址: \n 2001:288:6004:17:2023:cadb:: 班級名單序號 \n 41123201 \xa0( repo ) 序號:\xa0 1 41123202 \xa0( repo ) 序號:\xa0 2 41123203 \xa0( repo ) 序號:\xa0 3 41123204 \xa0( repo ) 序號:\xa0 4 41123205 \xa0( repo ) 序號:\xa0 5 41123206 \xa0( repo ) 序號:\xa0 6 41123207 \xa0( repo ) 序號:\xa0 7 41123208 \xa0( repo ) 序號:\xa0 8 41123209 \xa0( repo ) 序號:\xa0 9 41123210 \xa0( repo ) 序號:\xa0 10 41123211 \xa0( repo ) 序號:\xa0 11 41123212 \xa0( repo ) 序號:\xa0 12 41123213 \xa0( repo ) 序號:\xa0 13 41123214 \xa0( repo ) 序號:\xa0 14 41123215 \xa0( repo ) 序號:\xa0 15 41123216 \xa0( repo ) 序號:\xa0 16 41123217 \xa0( repo ) 序號:\xa0 17 41123218 \xa0( repo ) 序號:\xa0 18 41123219 \xa0( repo ) 序號:\xa0 19 41123220 \xa0( repo ) 序號:\xa0 20 41123221 \xa0( repo ) 序號:\xa0 21 41123222 \xa0( repo ) 序號:\xa0 22 41123223 \xa0( repo ) 序號:\xa0 23 41123224 \xa0( repo ) 序號:\xa0 24 41123226 \xa0( repo ) 序號:\xa0 25 41123227 \xa0( repo ) 序號:\xa0 26 41123228 \xa0( repo ) 序號:\xa0 27 41123229 \xa0( repo ) 序號:\xa0 28 41123230 \xa0( repo ) 序號:\xa0 29 41123231 \xa0( repo ) 序號:\xa0 30 41123232 \xa0( repo ) 序號:\xa0 31 41123233 \xa0( repo ) 序號:\xa0 32 41123234 \xa0( repo ) 序號:\xa0 33 41123235 \xa0( repo ) 序號:\xa0 34 41123236 \xa0( repo ) 序號:\xa0 35 41123237 \xa0( repo ) 序號:\xa0 36 41123238 \xa0( repo ) 序號:\xa0 37 41123239 \xa0( repo ) 序號:\xa0 38 41123240 \xa0( repo ) 序號:\xa0 39 41123241 \xa0( repo ) 序號:\xa0 40 41123243 \xa0( repo ) 序號:\xa0 41 41123244 \xa0( repo ) 序號:\xa0 42 41123245 \xa0( repo ) 序號:\xa0 43 41123246 \xa0( repo ) 序號:\xa0 44 41123247 \xa0( repo ) 序號:\xa0 45 41123248 \xa0( repo ) 序號:\xa0 46 41123249 \xa0( repo ) 序號:\xa0 47 41123250 \xa0( repo ) 序號:\xa0 48 41123251 \xa0( repo ) 序號:\xa0 49 41132222 \xa0( repo ) 序號:\xa0 50 41136103 \xa0( repo ) 序號:\xa0 51 41136124 \xa0( repo ) 序號:\xa0 52 41136131 \xa0( repo ) 序號:\xa0 53', 'tags': '', 'url': 'links.html'}, {'title': 'w4-w5', 'text': '本課程所謂個人網站, 即 github帳號.github.io, 可由使用者自行設定內容, 建議長期維護後可用於研究所推甄, 或求職時使用. \n 本課程所謂評分網站, 即 github帳號.github.io/cad2023, 內容及維護歴程資料將用於課程評分. \n 第四週任務: \n \n 建立線上考試帳號. \n 自行建立 Github 帳號下的 cad2023 倉儲 ( template ), 並設定 Github Pages. \n 利用 Replit 啟動 Github 帳號下的 cad2023 內容編輯網站, 並設法將改版內容推向 Github ( cp2023 參考內容 ). \n 依據  112 學年度第一學期教師授課表 中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號. \n 利用自選 CAD 套件 (Solidworks, Solid Edge, Inventor, NX, Creo, Onshape, Solvespace 或其他套件) 完成任務一的零組件設計繪圖. \n 參考  pjcopsim  與  resources , 將任務一所完成的零組件轉入 CoppeliaSim, 並進行系統模擬設計. \n \n \n 評分網站與倉儲: \n 2a cad2023 學員網站與倉儲連結 \n 2b cad2023 學員網站與倉儲連結 \n 學員展示用 IPv6 位址: \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 班級名單序號 \n \n 以下為專案一 perpetual motion simulator 的零組件設計繪圖與初步系統模擬範例: \n \n Perpetual Motion Simulator in Onshape , 轉入 CoppeliaSim 後放大 10 倍, 且 z 軸向上之模擬場景,  下載 perpetual motion simulator stage2.7z  (需要下載密碼) \n \n w5 2b 從 Onshape 轉出零組件 STL 後轉入 CoppeliaSim 操作說明 . \n w5 2b  建立 cad2023 且 import 進入 Replit 學員名單 . \n w5 2a  建立 cad2023 且 import 進入 Replit 學員名單 . \n \n 希望達成的系統模擬結果: \n \n 其他在電腦輔助設計室 Win 11 電腦所執行的  perpetual motion simulator 模擬影片 \n 請各學員自行利用  https://github.com/mdecycu/cmsite  作為 Template 建立 cad2023 評分倉儲, 或者自行從空倉儲, 以  https://github.com/mdecycu/cmsimde  作為子模組建立 cad2023 評分倉儲. \n 利用 cmsite 倉儲內容作為 Template 建立 cad2023 倉儲 : \n \n 登入 Github 帳號 \n 連線至  https://github.com/mdecycu/cmsite , 選擇  Use this template  下方的 Create a new repository, 建立 cad2023 倉儲 \n \n 利用空倉儲建立 cad2023 倉儲 : (w7 2b 時段 操作說明1 ,  操作說明2 ) \n 必須在近端 Windows、Linux 或 Mac 操作系統中的命令列中執行 git 指令, 淺綠色部分為需要輸入的指令. \n \n mkdir cad2023 \n cd cad2023 \n git init \n 利用 SciTE 建立 README.md 檔案, 放入後續在 Replit 會需要的 git submodule update 以及 pip install 指令 \n git add README.md \n git commit -m  "add README.md" \n 利用下列指令將 cmsimde 倉儲設定為本倉儲的子模組且放入 cmsimde 目錄中 \n git submodule add https: //github.com/mdecycu/cmsimde.git cmsimde \n 將 cmsimde 目錄中的 up_dir 內容複製到倉儲根目錄 \n 納入所有變更的內容 \n git add . \n git commit -m  "add cmsimde as submodule" \n 建立 main 分支, 且設為主分支 \n git branch -M main \n 設定 putty session 名稱為 github.com, 且能以 SSH 連線至 github.com 主機 \n git remote add origin git@github.com:scrum-1/cad2023.git \n git push -u origin main \n \n 過程中若出現 git 從 github.com 連線時產生 Error, 則可能是因為 Windows SChannel API 取用沒有設定對應 key 資料, 此時可以設法使用 OpenSSL 進行連線 handshake, 而不使用 SChannel API 進行認證. \n \n 參考的 .gitconfig 設定如下: \n \n [user]\n    name = scrum-1\n    email = scrum1@mde.tw\n[http]\n    proxy = http://[2001:288:6004:17::4]:3128\n \n; Switching to openssl\n; https://github.com/desktop/desktop/issues/3260\n[http "https://github.com"]\nsslVerify = false \n \n', 'tags': '', 'url': 'w4-w5.html'}, {'title': 'solidworks', 'text': 'SOLIDWORKS  是目前全球機械業界使用最普遍的設計與繪圖套件 (估計全球有超過 300 萬名工程師用戶). 有關 CAD 的發展歷史, 請參考 這個影片 . 有關 SOLIDWORKS 的起源以及相關歷史資料, 請參考 影片一 、 影片二 、 影片三 、 影片四 與 影片五 的介紹. \n 其他與 SOLIDWORKS 有關的參考資料: \n SOLIDWORKS 是由  Jon Hirschtick  在1993 年創立的。他運用作為  MIT Blackjack Team  ( 決勝 21 點電影 ) 成員之一所賺到的 100 萬美元創辦該公司。SOLIDWORKS 首次於1995 年與 Windows 95 同時發布.  (source ) \n interviews of Jon Hirschtick,\xa0 1 ,\xa0 2 ,\xa0 3 ,\xa0 4 ,\xa0 5 \n 當年\xa0 SolidWorks 97 demo 影片 \n 使用 SOLIDWORKS 執行電腦輔助設計零組件繪圖, 在電腦輔助設計室中可以使用 SOLIDWORKS 2023, 或在自己的電腦或筆電中安裝 SOLIDWORKS 2022 教育版 (2023 安裝套件尚未取得). \n 下載安裝 SOLIDWORKS 2022 : \n 下載 SolidWorks 2022 安裝檔案  (檔案大小 16GB, for @nfu users only, 請先根據安裝序號與認證主機在校園網路中或透過 VPN (從  ecare 登入 申請) 連網, 必須完整安裝結束後, 再進行 service pack 更新) \n 安裝 SoildWorks 2022 過程畫面 (因為必須在校園內或使用 VPN 認證才能完成安裝, 因此以下直接顯示出 Serial Number 與認證主機 IP 位址): \n 下載後解開壓縮檔案, 執行 Setup.exe 進行安裝 (以::2 主機的安裝為例): \n \n 輸入安裝序號, 以下只安裝基本模組, 並沒有勾選其餘套件: \n \n \n 在安裝過程必須先安裝與序號對應的版本內容後再進行更新, 因此以下使用內定的否, 表示先不下載更新檔案: \n \n 勾選接受 SolidWorks 條款後進行安裝: \n \n 點選馬上安裝後,\xa0 會跳出認證伺服器的視窗表單, 必須輸入正確的認證埠號與 IPv4 位址才可進行安裝, 截至 2023.04.07, 校內的 SolidWorks 認證主機僅支援 IPv4 網路協定認證, 若希望取得認證的電腦僅啟動 IPv6 網路協定, 將無法取得認證授權. \n \n 接著按下確定後, 就可以進行漫長且容量達 20 GB 的 SolidWorks 安裝: \n \n 安裝完成之前, 會跳出下列視窗, 可以選擇不參加客戶經驗改進計畫, 或許能讓操作過程更加順暢: \n \n 最後按下完成鍵就可以執行 SolidWorks 2022 了. \n 啟動時顯示共有 500 個用戶可以同時連線: \n \n 啟動時必須允許 SolidWorks 通過公用網路防火牆: \n \n 而且必須接受 SolidWorks 的使用授權: \n \n 然後還要進行各模組的資料更新, 以下選擇更新所有模組: \n \n 更新完成後, 在開始選單中執行 SOLIDWORKS 2022, 然後同意使用授權: \n \n 終於可以使用這個佔用 20GB 硬碟資料的 SolidWorks 了: \n \n \n', 'tags': '', 'url': 'solidworks.html'}, {'title': 'siemens', 'text': '西門子 (Siemens) 是德國有名的機電資軟硬體整合公司, 目前旗下的電腦輔助機械設計套件包括中階套件  Solid Edge ( community 版 Siemens Solid Edge \xa0-\xa0 可攜版下載  (無須上網即可開啟, 但因為啟動之前必須執行 Solid Edge 所需之 Registry import, 因此可攜版比較建議在有還原卡或虛擬主機中使用, for @nfu users only), 與高階套件 NX. \n 下載  NX2027.3401_lite_cad2022.7z  (需要下載密碼, 執行時必須連網至機械設計工程系的認證伺服器才能開啟) \n', 'tags': '', 'url': 'siemens.html'}, {'title': 'autodesk', 'text': 'AutoDesk 公司旗下的電腦輔助機械設計套件都提供 免付費教育版 . 其中 Inventor 可 直接從學校網站下載 , 且 教育版的 A360  可在雲端或近端啟動, 但近端必須安裝對應套件. \n', 'tags': '', 'url': 'autodesk.html'}, {'title': 'ptc', 'text': 'PTC  公司目前擁有 Creo 與  Onshape  等兩套常見的電腦輔助機械設計套件. Creo 前身為著名的參數設計繪圖鼻祖 Pro/Engineer, 而  Onshape  則由原創 SOLIDWORKS 的開發者所建立的全雲端電腦輔助機械設計服務. \n Creo for students:  https://www.ptc.com/en/products/education/free-software/creo-college-download \n 學生版安裝授權, 統一透過 product code: BK100908EDSTUDENTEDUNI 取得, 但必須在 IPv4 連網時才能取得授權檔案:\xa0BK100908EDSTUDENTEDUNI_license.dat, 授權使用期限為一年. \n \n 已經建立帳號者:  登入 PTC education 網站 \n https://apps.ptc.com/schools/references/install_creo10_schools_standard.pdf \xa0 \n 使用管理者開啟 parametric.psf 加入:\xa0ENV=PRO_LANG=english, 表示要使用英文介面. 使用 Chinese Simplified 代號為 chs, 使用 Chinese Traditional 代號為 cht. \n 安裝 Creo 位置:\xa0C:\\Program Files\\PTC\\Creo 10.0.0.0\\Parametric\\bin \n 免費使用的教育版授權檔案為:\xa0BK100908EDSTUDENTEDUNI_license.dat \n 以下為安裝 Creo 10 的過程與說明 ( wink_html.txt ): \n \n \n Onshape for education:  https://www.onshape.com/en/education/', 'tags': '', 'url': 'ptc.html'}, {'title': 'w6-w7', 'text': 'w5 之前的教學影片: \n 利用隨身碟上的批次檔案進行電腦輔助設計室網路環境設定 \xa0(更完整的 網路設定內容 ) \n w5 2b 從 Onshape 轉出零組件 STL 後轉入 CoppeliaSim 操作說明 \n \n w6 \n 評分網站與倉儲: \n 2a cad2023 學員網站與倉儲連結 \n ag1  ( repo ) \n ag2  ( repo ) \n ag3  ( repo ) \n ag4  ( repo ) \n ag5  ( repo ) \n ag6  ( repo ) \n 2b cad2023 學員網站與倉儲連結 \n 學員展示用 IPv6 位址: \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 班級名單序號 \n 建立線上考試題目: \n 學員完成任務一零組件繪圖 \n 學習如何利用 zmqRemote API Python 控制模擬場景中的零組件 \n 2a w6 已經建立評分倉儲, 設定 Pages, import 進入 Replit, 並能推送版本回到 github  名單 : \n 40923118 \xa0 ( repo ) 40923124 \xa0 ( repo ) 40923127 \xa0 ( repo ) 40923139 \xa0 ( repo ) 40923213 \xa0 ( repo ) 41023134 \xa0 ( repo ) 41023155 \xa0 ( repo ) 41023156 \xa0 ( repo ) 41123105 \xa0 ( repo ) 41123108 \xa0 ( repo ) 41123111 \xa0 ( repo ) 41123112 \xa0 ( repo ) 41123114 \xa0 ( repo ) 41123115 \xa0 ( repo ) 41123116 \xa0 ( repo ) 41123117 \xa0 ( repo ) 41123119 \xa0 ( repo ) 41123120 \xa0 ( repo ) 41123122 \xa0 ( repo ) 41123123 \xa0 ( repo ) 41123124 \xa0 ( repo ) 41123126 \xa0 ( repo ) 41123128 \xa0 ( repo ) 41123129 \xa0 ( repo ) 41123130 \xa0 ( repo ) 41123134 \xa0 ( repo ) 41123135 \xa0 ( repo ) 41123137 \xa0 ( repo ) 41123139 \xa0 ( repo ) 41123140 \xa0 ( repo ) 41123141 \xa0 ( repo ) 41123142 \xa0 ( repo ) 41123143 \xa0 ( repo ) 41123144 \xa0 ( repo ) 41123145 \xa0 ( repo ) 41123146 \xa0 ( repo ) 41123148 \xa0 ( repo ) 41123149 \xa0 ( repo ) 41123150 \xa0 ( repo ) 41123152 \xa0 ( repo ) \n 2b w6 已經建立評分倉儲, 設定 Pages, import 進入 Replit, 並能推送版本回到 github  名單 : \n 41123205 41123215 41123216 41123220 41123231 41123241 41123243 41123251 \n 利用 pull request 加入或修改  https://github.com/mdecycu/studlist \xa0倉儲中  2b.txt  資料的 說明影片 . \n 利用  https://github.com/mdecycu/cmsite \xa0作為 template 建立 cad2023 倉儲與網站, 並轉入 Replit 進行維護的 說明影片 . \n 2a 開始進行九人一組, 每三人坐在一起, 由組長建立 cad2023_ag1 ~ cad2023_ag6, 並將 mdecycu 設為協同者的 說明影片 . \n \n w7 \n 2b 進行九人一組安排固定座位, 由組長建立 cad2023_bg1 ~ cad2023_bg6, 並將 mdecycu 設為協同者. \n 各九人分組必須在 w9 之前繳出下列圖示的 3D 可自行列印的零組件模型, 含各 CAD 套件的完整安裝與零組件繪圖過程影片(期中考週由各組進行簡報) . \n \n SolidWorks, 請採用  2022 以上版本 , 安裝檔案 SOLIDWORKS 2022 SP3.1_20220711.7z 16GB. 參考資料:  http://wcm.cycu.org:88/github/cad2019/downloads/Solidworks_Tutorial/  (在系網以 IPv6 連線開啟) \n NX, 請採用  NX2027.3401_lite_cad2022.7z  (需要下載密碼, 下載 2GB, 解開後約 8GB). \n Inventor, 請在校網或使用 VPN 下載 2022 版本 (載點  1 ,  2 ,  3 , 安裝檔案 Inventor_Pro_2022_Traditional_Chinese_Win_64bit_Dlm_001_003.sfx.exe 2GB). \n Solid Edge, 請使用  Community Edition , Gmail 登入後, 下載 Solid_Edge_Community_2023_2210.exe 3.8GB. \n Creo, 請使用  Student Edition , 以學校電子郵箱註冊可以下載 Creo 10 (MED-100WIN-CD-470_10-0-0-0_Win64.zip 安裝檔案 5.9GB),  參考資料 . \n Onshape . \n Fusion 360, 請在校網或使用 VPN  下載 , Fusion 360 Admin Install.exe 安裝檔案 GB. \n \n \n 維護 cad2023 倉儲與網站的方法: \n \n Replit + Github \n 可攜環境 + Github (下載包含 Python 3.12.0, Tiny C Compiler 與 CoppeliaSim 4.5.1 的  portable_2024_cp_wcms_cad_cd_w_ebooks.7z , 1.2GB 解開後 3.3GB, 需要下載密碼), 維護倉儲與網站說明影片 之一 ,  之二 . \n 自架伺服器 + Github \n \n \n', 'tags': '', 'url': 'w6-w7.html'}, {'title': 'Win11', 'text': '目前擬將近端的靜態網站呈現改為 http, 而非 https 暫時避開下列問題. \n \n 為了讓 cd2023 內容管理系統在近端 Python 3.12.0 環境啟動時, 能夠順利透過 start_static 模擬靜態系統, 目前的 start_static 原始碼改為: \n @app.route(\'/start_static/\')\ndef start_static():\n\n    """Start local static server\n    """\n\n    if isAdmin():\n        server_address = get_wan_address() or \'localhost\'\n        server_port = static_port\n\n        # Determine address family based on server_address\n        address_family = socket.AF_INET if \':\' not in server_address else socket.AF_INET6\n\n        httpd = http.server.HTTPServer((server_address, server_port), http.server.SimpleHTTPRequestHandler, bind_and_activate=False)\n        httpd.socket = socket.socket(address_family, socket.SOCK_STREAM)\n        httpd.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        if address_family == socket.AF_INET6:\n            httpd.socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, 0)\n            httpd.socket.bind((server_address, server_port, 0, 0))\n        else:\n            httpd.socket.bind((server_address, server_port))\n        # for Python 3.12.0 need to use ssl create context first\n        # https://docs.python.org/3/library/ssl.html#ssl-security\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n        context.load_cert_chain(certfile=\'./localhost.crt\', keyfile=\'./localhost.key\')\n        httpd.socket = context.wrap_socket(httpd.socket, server_side=True)\n        httpd.server_activate()\n        httpd.serve_forever()\n    else:\n        return redirect("/login")\n \n 其中當 start_static 執行時, 經由 openssl 指令: \n Y:\\portablegit\\usr\\bin\\openssl s_client -connect [Windows 11\'s IPv6 address]:8445 -tls1_3 \n 檢查, 發現目前採用\xa0context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER) 設定中的\xa0 ssl.PROTOCOL_TLS_SERVER, 採用的認證版本可為 tls 1.2 與 1.3 版, 但是 如同 這裡的敘述 , 伺服器發出的 tls 1.3 版可以被 Windows 10 操作系統接受, 但卻無法在 Windows 11 操作系統中正確連結採用上述程式碼的靜態網頁伺服器. \n 另外, 透過 Windows 11 搜尋輸入\xa0inetcpl.cpl 可以發現 tls 1.3 已經啟用. 因此目前無法得知為何 start_static 啟動後, 無法在 Windows 11 連線到虛擬的系統靜態網站. \n', 'tags': '', 'url': 'Win11.html'}, {'title': 'w8', 'text': '針對 Coppeliasim 4.6.0 版的推出: \n CoppeliaSim 於 2023.10.21 推出  4.6.0 版 . (因為更改不多, 目前可以沿用 4.5.1 rev4, 但仍必須關注 CoppeliaSim 逐步強化 Python scripting 的趨勢( 1 ,  2 ), 其目的在於能夠更便於在機電整合場景系統中, 導入更多的 AI 相關 Training) \n plugin  架構更新, 可加載或卸載 plugin \n sim.setThreadAutomaticSwitch is deprecated in favor of  sim.setStepping \n sim.switchThread is deprecated in favor of  sim.step \n Command-line  option -H now loads the headless version of the CoppeliaSim library. \n CoppeliaSim 使用者手冊:  https://mde.tw/pjcopsim \n zmq Remote API:  https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm \n https://github.com/CoppeliaRobotics/zmqRemoteApi \n CoppeliaSim 4.5.1 for IPv6: \n 下載  CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需要下載密碼) \n 下載  zmqRemoteAPI Python for cad2023.7z  (需要下載密碼) \n \n 有關 s1511.cycu.org 主機的使用, 也可以參考  https://mde.tw/cpnote  中各章節頁面內容. \n 維護網站的三個方式: \n \n localhost 透過 token, SSH 確定 git push 權限, SSH 設定可透過 Putty 完成 \n Replit 透過 connect 功能連結與 Github 的權限 \n 自架主機 s1511.cycu.org, 透過 SSH 與分配埠號 \n \n \n 以下將說明第 3 種方法, 使用 s1511.cycu.org 管理個人與分組網站: \n 其中包括 1)  如何遠端登入 、2 )  如何取放檔案 、3)  如何與 github 帳號彼此信任 、4)  如何取下 cad2023 、5)  如何啟動或關閉 cad2023 倉儲 、6)  如何連結到動態網站 、7)  如何設定靜態網站 、8)  如何連動動態網站改版與靜態網頁 、9)  如何對資料進行保全 以及 10)  網路連線協定 等相關議題. \n w8_2a_s1511 設定操作影片 part1.mp4 \n w8_2a_s1511 設定操作影片 part2.mp4 \n w8_2a_s1511 設定操作影片 part3.mp4 \xa0(只有前段有聲音) \n w8 2a s1511 設定操作影片 part4.mp4 \n 1)  如何遠端登入 : \n 遠端登入到 s1511.cycu.org (只支援 IPv6 網路協定), 命令列指令 ssh client, 工具可以使用 Putty \n 使用 ssh 指令: ssh 帳號@s1511.cycu.org 然後輸入密碼 (鍵入密碼時螢幕並不會顯示字元) \n 使用 putty.exe 設定 session 令其連接到\xa0 s1511.cycu.org \n 登出指令為 exit \n 假如在 IPv4 網路協定下, 則 ssh 指令與 putty.exe 都必須透過能支援 IPv6 的代理主機進行連線. \n 2b w8 作業: 請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容, 透過程式的讀取與篩選, 按照時間先後, 列出 2b 修課學員中已經登入 s1511.cycu.org 的學號. (修課學員名單\xa0 2a:\xa0 0838 , 2b:\xa0 0851 ) \n 假如在近端處理, 必須同時儲存兩個檔案後, 進行資料選取: \n get_stud_num_from_last_data.py \xa0(若採 Brython 編寫, 可以直接 列出 2b w8 結果 \xa0( 2a w8 結果 ), 依照登入時間先後排序, 其中 41123227 為管理者最早測試時登入, 若採用 ANSI 編寫:  c_parse_last_cp2023.7z ) \n # 讀取學號檔案\nwith open("2b_user_list.txt", \'r\') as user_file:\n    user_lines = user_file.read().splitlines()\n\n# 讀取 last 指令轉出的檔案, 以 last -w > cad2023_2b_w8.txt 建立檔案\nwith open("cad2023_2b_w8.txt", \'r\') as cad_file:\n    # 以下是利用跳行符號, 將每一行區隔成數列\n    cad_lines = cad_file.read().splitlines()\n#print(cad_lines)\n\n# 從 cad_lines 建立所有登入使用者數列\nlogin_users = []\nfor i in cad_lines:\n    line_list = i.split(" ")\n    login_users.append(line_list[0])\n#print(login_users)\n\n# 根據 https://stackoverflow.com/questions/480214/how-do-i-remove-duplicates-from-a-list-while-preserving-order\n# 數列去除重複元素但仍保持原始次序\nlogin_users = list(dict.fromkeys(login_users))\n#print(login_users)\n\n# 建立數列存放符合條件的使用者\nvalid_users = []\n\n# 取出符合條件的使用者\nfor line in login_users:\n    if "cad" in line:\n        # 將 cad 字串去除\n        user_number = line.replace("cad", "")\n        if user_number in user_lines:\n            valid_users.append(user_number)\n            \n# 利用 reverse() 將 valid_users 反向排序\nvalid_users.reverse()\n\n# , 最早登入者列在最前面\nfor user in valid_users:\n    print(user)\n \n 2)  如何取放檔案 : \n 利用 sftp 從 s1511.cycu.org 取下檔案畫面: \n \n 進入對應的目錄之後, 以 pwd 確認所在目錄後, 以 get 取下檔案, 以 put 放上檔案, 例如: 進入 images 目錄後, 可以透過 get gd_ex1.png 取下圖檔, 若要將圖檔放入 images 目錄, 則只要確定 sftp 進入後, cd 到 images 目錄, 然後以 put gd_ex1.png 將圖檔送入. \n 3)  如何與 github 帳號彼此信任 : \n 利用 ssh-keygen 在 .ssh 目錄建立 id_rsa 與 id_rsa.pub, 之後將 id_rsa.pub 登記到各自帳號下 settings 的 SSH and GPG keys 區域. \n .ssh 目錄中的\xa0 config , 將 SSH session 名稱設為 github.com: \n Host github.com\nUser git\nHostname github.com\nProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n 將 上列 config 送到帳號下的 .ssh 目錄之後, 就可以利用 github.com 作為 session, 從 github.com 取下 cad2023 倉儲, 並且已經具備 git push 的權限. \n 4)  如何取下 cad2023 : \n 以 SSH 協定取下 cad2023 的指令: \n git clone --recurse-submodules  git@github.com :帳號/cad2023.git \n 接下來必須從 cad2023 取下 server.py 進行編輯, 放入自己分配到的 9xxx 埠後, 再送回. \n 5)  如何啟動或關閉 cad2023 倉儲 : \n 當使用者已經將上述 public key 登錄到 Github 帳號下, 且已經將 server.py 中的 9xxx 改為自己所分配到的內部埠號後再送回, 則可以利用 python3 server.py 啟動編輯網站, 並測試是否可以連線到  https://s1511.cycu.org:8xxxx \n 由於管理者內建密碼為 admin, 使用者修改後, 編碼字串將存入 config/config, 此檔案必須設為只有管理者可以 read, 若目前位於登入後的工作目錄, 則其指令為: \n chmod og-rwx config/config \n 表示要將 others 與 group 針對 config/config 檔案的 read, write 與 execute 權限取消. \n 若希望使用者登入後動態網站仍然執行, python3 server.py& \n 當 server.py 已經啟動, 使用者登入後可以利用以下指令, 列出各使用者啟動網頁編輯所對應的 PID (Process ID): \n ps -axo pid,comm,uname | grep "python3" \n 各用戶若希望刪除已經啟動的 Process, 可以找到所啟動的 PID 後, 以下列指令關閉服務 (若 PID = 1234): \n kill 1234 \n 其中, 系統管理者可以刪除所有 Processes, 而各用戶只能刪除各自所啟動的 Process. \n 6)  如何連結到動態網站 : \n python3 server.py 啟動測試是否可以連線到  https://s1511.cycu.org:8xxxx \n 編輯網站啟動之後, 使用者登入後可以透過 config 指令修改管理者密碼, 而此一密碼的編碼將存入 s1511 主機倉儲檔案中的 config/config 檔案中, 且此一檔案將只會位於 s1511, 而不會被推向 github.com (因為 .gitignore 的設定). \n 當使用者決定要進行 git add 與 git commit 之前, 必須先以 git config 設定 user.name 與 user.email, 此設定將會存入 .gitconfig 檔案中. \n 7)  如何設定靜態網站 : \n 前面已經在 /home/帳號/倉儲目錄 透過 SSH 協定從 github.com 取下檔案內容, 由於 SSH keys 的設定, 此一倉儲一旦改版, 可以在新增提交之後, 可以透過 git push 指令將改版資料推向 github.com. \n 當倉儲的靜態網站 git push 至 github.com 後, 將會透過 Github Pages 的設定進行轉檔. \n 若使用者希望在 s1511 主機中伺服對應的倉儲靜態網站, 則可以將倉儲檔案放入帳號中的 public_html 目錄中. \n 由於位於 public_html 僅需鏡射位於 github.com 中的倉儲檔案資料, 並不作為 git commit 與 git push 之用, 因此可以利用 git clone --recurse-submodules https://github.com/帳號/倉儲名稱.git 取下 (也就直接以 https 協定取下倉儲內容), 並可在 https://s1511.cycu.org/~帳號/倉儲名稱 中擷取靜態網站資料. \n 8)  如何連動動態網站改版與靜態網頁: \n 當每次 /home/帳號/倉儲 中的檔案改版, 而且資料已經推送到 github.com, 使用者就可以進入 public_html 中的對應倉儲目錄, 以 git pull 指令從 github.com 取得最新的版本資料, 此指令可以採手動, 也可以設法納入倉儲的 acp 指令中: \n acp 必須納入 public_html 目錄中的靜態網站 git pull, 且利用 chmod u+x acp 令其可以執行. \n acp  內容: \n #! /bin/bash\ngit add .\ngit commit -m "$1"\ngit push\ncd ./../public_html/cad2023\ngit pull \n 9)  如何對資料進行保全: \n chmod u+x acp \n chmod og-rwx config/config \n chmod 711 /home/cad學號 \n chmod 755 /home/cad學號/public_html \n 假如自己所分派到的網路 port 遭到占用, 可以利用下列指令查出使用該埠號的使用者帳號: \n 例如要查詢埠號 9210 埠號的使用情形, 指令為\xa0 lsof -i :9210, 其中 ls 為 list, of 為 open file, -i 中的 i 為 internet, :9210 表示要求列出與 port 9210 有關 internet 使用相關的資料. \n 10)  網路連線協定: \n 將 cad2023 倉儲資料取到 s1511.cycu.org 帳號下, 若使用 SSH 協定且位於只有 IPv6 網路協定, 則分別牽涉以 SSH 及 https 協定連線到 github.com 的設定. \n 其中所謂運用 SSH 協定與 github.com 連線, 運用在 git clone --recurse-submodules  git@github.com:帳號/cad2023.git  因為其流程是利用 SSH 協定以 git 作為帳號登入到 session 名稱為 github.com 的連線主機 (即 config 中的 Hostname 設定), 能不能遠端登入則取決於 github.com session (即 config 設定檔案中的 Host 名稱) 後面的帳號是否已經登錄與目前 .ssh/id_rsa 所對應的 public key. \n 至於在純 IPv6 網路下的 s1511.cycu.org 其 https 所需的 proxy 設定, 已經由管理者設定於 /etc/environment 中, 因此所有使用者都無需設定. \n \n 電腦輔助設計與實習課程分組網站在 s1511.cycu.org 所分配的外部與內部埠號: \n cad2023_ag1: 8232, 9232 \n cad2023_ag2: 8233, 9233 \n cad2023_ag3: 8234, 9234 \n cad2023_ag4: 8235, 9235 \n cad2023_ag5: 8236, 9236 \n cad2023_ag6: 8237, 9237 \n \n cad2023_bg1: 8238, 9238 \n cad2023_bg2: 8239, 9239 \n cad2023_bg3: 8240, 9240 \n cad2023_bg4: 8241, 9241 \n cad2023_bg5: 8242, 9242 \n cad2023_bg6: 8243, 9243 \n \n w8 登入查驗完成名單: \n 2a: \n 41023134 40923118 41123145 41123137 41123153 40923127 41123139 41123108 40923213 41123117 41123141 41023245 41123122 41123152 41123129 41123149 40923139 40923124 41123131 41123135 \n 2b: \n 41123243 41123241 41123249 41123214 41123224 41123228 41123215 41123245 41123216 41123204 41123234 41123244 41123235 41123240 41123229 41123209 41123207 41123246 41123250 41123201 41123217 41123251 41123218 \n 模擬參考: \n https://www.researchgate.net/publication/263466730_Mathematical_Modeling_of_Electromagnetic_Levitation_Ball_using_Bondgraph \n https://hal.science/hal-02408779v1/file/Magnetic_Canon.pdf', 'tags': '', 'url': 'w8.html'}, {'title': 'w9-w11', 'text': '下載整合網路設定、可攜程式系統以及執行可攜 Solid Edge 的 reg 與 batch files.7z  (需要密碼) \n 請各分組實際操作  https://mde.tw/pjcopsim/content/bubbleRobTutorial.html  之後, 將操作過程與心得放入各組的分組網站中 (頁面標題為 w11), 並說明各組員在過程中所負責的工作內容與任務, 各組員所負責的項目請放入個人的網頁中. \n 過程中所遭遇問題, 請各組員利用 Teams 詢問 (CAD2023 MS Teams 代碼為: fnueb56). \n 執行 perpetual motion simulator 系統: \n 紀錄鋼球運動速度:  1 ,  2 . \n 對模擬物件施力:  1  (non-central),  2  (center of mass),  3  (施力並設定材料性質). \n 模擬電磁力:  1 ,  2 . \n CoppeliaSim 鋼球永動模擬器電腦輔助設計三個階段: 建立模型零組件 - 轉入機電模擬系統 - 根據實際物理條件設置機電系統.\xa0 perpetual_motion_simulator_project_cad2023.7z 下載  (需要密碼) \n 雲端、區網與近端環境中的電腦輔助設計環境: \n 直接在網路上進行電腦輔助設計的好處雖然很多, 但是在 商用的雲端系統 , 例如: Github 或 Replit, 使用者只能依照服務提供者的方法及流程進行應用, 當 Github 宣布在 2023 年底之前各用戶必須使用 2FA 認證登入, 使用者只能照辦, 否則帳號就可能被禁用. \n 作為 Replit 的免付費用戶也處於相同的情況, 當服務提供者宣布在 2024 年初開始, 只有付費用戶可以使用廣域的 Webview, 若希望仍維持免付費使用 (目前  Replit Core 年費  120 美元), 屆時再看是否能繼續開啟動態網站編輯, 並將改版內容提交推送到 Github 倉儲, 以便採分散式版次管理流程維護 Github Pages 網站. \n 同樣利用網路服務, 但設法將所有超過兩百名用戶集中到 自行搭建的廣域網站 系統, 也可以擁有類似 Replit 上維護網站內容的優點, 可是壞處是在系上工作站室所設定的軟硬體與網路連線, 都必須自行維護, 可用性與穩定度都遠遠不及商用的雲端系統. \n 另外, 在無網路連線的情況下, 若先前已經將 Github 上倉儲, git clone 到 近端硬碟或隨身碟 , 使用者仍可以直接利用可攜程式系統, 執行動態網站並針對電腦輔助流程新增提交改版內容, 等到有網路連線的時段再將資料推送到 Github. \n 最後, 假如系上的連外網路無法順利與 Github 相連, 所有電腦輔助設計與協同都必須在區網進行, 則可以使用  Fossil SCM  進行各學員的分散式版次管理. (請參考 這裡 的說明). \n 循著上述相同的網路或自主環境, 利用  Onshape  就與商用雲端系統相似, 一定要上網才能進行輔助設計繪圖, 而在系上或學校網路認證才能開啟的  NX 或 SolidWorks , 就必須在自行搭建的認證主機能夠運作, 才可連線認證後開啟. 至於  Solid Edge 可攜版與 Solvespace  則可以在沒有網路連線的情況下進行零組件的設計繪圖. \n \n w10 網路狀態: 目前似乎從學校電腦無法使用 hinet 的 IPv6 DNS 伺服器. 驗證方式: 在命令列中輸入 nslookup, 然後以 server 2001:b000:168::1 指令將 DNS 設為中華電信的符號名稱伺服器, 然後查詢 google.com. \n 因應方法: 使用機械設計系所建立的 DNS 伺服器, 140.130.17.3 以及  2001:288:6004:17::3 \n 無法使用中華電信 DNS 原因: 應該是學校網管修改設定, 禁止跨區設定 DNS 伺服器. \n w10 Ubuntu 問題: 22.04 版更為最新後, netplan 在無 openvswitch 啟動的情況下無法更新設定. \n 先處理 /etc/netplan/net.yaml 中 DNS 伺服器改為系上主機, 在無法使用 sudo netplan apply 更新 /etc/netplan/net.yaml 設定之前, 可以查詢 /etc/environment 中是否使用 IPv6 address 進行設定 http_proxy 與 https_proxy 變數. 或者修改 /etc/resolv.conf 中的 nameserver 設定, 讓 net.yaml 中的 DNS 設定可以運作. 且利用  sudo apt install openvswitch-switch  安裝並執行 netplan 所需的服務 (其實是 bug, 但為了能讓 netplan 正常運作的權宜之策). \n 有關電腦輔助設計室網路設定: \n w10_2b_cadlab_network_setting.7z  (需要下載密碼) - 電腦輔助設計室網路設定批次與 Powershell 檔案. \n tinyc.7z  (需要下載密碼) - 使用 Tiny C Compiler 編譯 C 程式, 包含 gd 與 gnuplot. \n python3114_git_putty.7z  (需要下載密碼) - 將近端 cmsimde 啟動並改版後推向 Github 所需的檔案. \n 若電腦輔助設計室網路不順, 可以先將倉儲 clone 到隨身碟, 並利用近端工具進行輔助設計且改版後 (git add and git commit), 等到網路順暢時才 push. \n \n creo 10 安裝流程的 wink 專案檔案下載  (需要密碼) \n 有關線上簡報、網誌與多媒體影片製作工具, 請參考:  https://mde.tw/cpnote/content/w10.html \n 有關學習計算機程式與電腦輔助設計相關課程的心態與方法, 請參考 這裡 的說明. \n 因為 Python 3.12.0 環境下 Leo Editor 還無法正常透過 pip 安裝, 因此必須手動安裝 PyQt5 之後, 再使用 pip install leo, 所完成的 Python 3.12.0:\xa0 Python312_leo_664_PyQt5.7z  (需要下載密碼) \n 有關口頭報告 (oral presentation): \n PowerPoint vs reveal.js: Choosing Presentation Tools (softwarekeep.com) \xa0 \n https://ithelp.ithome.com.tw/articles/10185467 \xa0 \n cad2023 倉儲中的 reveal.js:\xa0 https://mde.tw/cadnote/reveal/ \xa0 \n 有關永動機運動模擬玩具 (perpetual motion simulator toy): \n CAD 零組件繪圖 \n 原型製作前的系統模擬與製程規劃 \n 如何學習 CoppeliaSim: \n 透過閱讀\xa0 https://mde.tw/pjcopsim \xa0中的 tutorial 與相關指令說明後, 實際操作測試並在個人網頁中記錄各項功能的使用方法. \n 進入 CoppeliaSim  Forum , 搜尋相關討論或發問. \n Arduino code to CoppeliaSim  展示. ( Horosim ,  備份 ), 更早的 討論 . 虛實整合:  1 ,  2 ,  3 . \n 從既有討論串中學習:  1 , \n 了解與磁場模擬有關的研究:  1  (需要下載密碼),  2 ,  3 . \n 從 案例 中學習. \n 有關鋼球平衡台 (steel ball balancing platform): \n 有關虛實整合彈珠台 (cyber-physical pinball table): \n', 'tags': '', 'url': 'w9-w11.html'}, {'title': 'wink', 'text': '學習如何利用  Wink  製作電腦操作流程影片, 並將影片放入個人與分組網頁中. \n 首先使用者必須了解  Wink  製作影片的功能與  ShareX  相同, 都是依賴  ffmpeg.exe . 意即使用  Wink  之前必須在 Preferences 中先行設定 ffmpeg.exe 所在位置, 否則無法對所建立的專案轉為 mp4 檔案. \n 另外, 若擷取關鍵影格的電腦螢幕解析度大於 1008 x 630, 通常建立將影格 resize, 以方便使用者在手機上觀看影片. \n 利用 Wink 建立操作影片的步驟: \n \n 設定 ffmpeg.exe 所在位置, 若使用隨身碟中的可攜程式系統, 可將 ffmpeg.exe 放在 data 目錄中, 並以 wink_ffmpeg.reg 進行設定, 也可將 Wink 的啟動與 start_ipv6.bat 進行整合. \n 開啟 Wink 新專案. \n 每按下一次 Pause 鍵, 可擷取操作過程中的畫面影格 (利用 Zoomit 放大所要強調的操作內容, 並以紅線框列). \n 操作錄製結束後, 從右下方的 Tray 中, 以滑鼠左鍵點選, 在 Wink 圖示中, 以滑鼠右鍵帶出 Finish Capture 按鍵, 點選後即可回到 Wink 專案區. \n 在每一頁影格中加入註解說明 TextBox 之前, 先利用 Project - Resize All Frames 將影格縮小至 1008 x630. \n 完成註解說明後, 可以逐一移動各頁面滑鼠游標位置, 並決定各頁面影片播放時的停留時間. \n 最後以 Render 按鈕進行轉檔, 並利用 View Rendered Output 檢視所建立的操作影片. \n \n wink_ffmpeg.reg 設定檔案內容: \n Windows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Debugmode]\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Debugmode\\Wink\\Settings]\n"FfmpegPath"="y:\\\\ffmpeg.exe"\n\n \n 2a_w10_start_ipv6_wink_reg.7z \n \n \n w11 作業 : \n \n 請分別利用 Replit、s1511.cycu.org 與 localhost 維護個人與分組網站, 分別在標題為 "hw" 的第一層頁面下, 建立第二層標題分別為 "Replit"、"s1511" 與 "localhost" 等三個頁面, 其中各放入採上述三種方式維護網頁的相關過程與細節. 並在各頁面中以文字說明操作步驟要點. \n 請在個人網頁中建立標題為 "project1" 的的第一層頁面下, 放入個人截至 w11 在 perpetual motion simulator 所完成的 Wink 過程操作說明影片. \n', 'tags': '', 'url': 'wink.html'}, {'title': 'pms', 'text': '平面上滾動的鋼球永動模擬器, 也算 perpetual motion simulator (pms) 中的一種: \n', 'tags': '', 'url': 'pms.html'}, {'title': 'w12', 'text': '2b_w12_seat.txt \n 2a_w12_seat.txt \n w12_2b_1.mp4 \xa0(利用 簡報 說明最新的網路設定流程, 以及 w12 的課堂測驗內容) \n 校方的 DHCP6 並沒有正確設定系上的 IPv6 Gateway, 也沒有 DNS 伺服器設定, 使用者必須自行根據 所分配的固定 IPv6 位址 進行設定, 另外校方的 IPv6 DNS 伺服器也無法正常運作, 必須使用系上的 DNS server 設定. \n Windows 網路查詢指令: ipconfig /all \n DNS 伺服器查詢指令: nslookup \n 查詢至特定主機的路徑指令: tracert \n 其他 Windows 常用的網路指令 \n w12_2b_2.mp4  ( 利用 簡報 說明如何將座次表放到倉儲 downloads 目錄, 且將連結放入 w12 頁面) \n 利用人工或電腦輔助方法建立 w12 頁面中的班上學員座次表? \n \n w12_2a_1.mp4  (ssh-keygen 在 .ssh 建立 id_rsa 與 id_rsa.pub, 以 sftp 放入 config, 並利用 puttygent 將 id_rsa 轉為 .ppk 以便設立 session 用) \n w12_2a_2.mp4  (如何利用 ChatGPT 協助解決座位排序與列印問題) \n w12_2a_3.mp4  (有關 Solvespace 基本繪圖與轉檔, 最後說明如何利用 IPv6 相容的 Python 與 CoppeliaSim 進行互動) \n 使用 ChatGPT 協助處理 上述 問題一 : \n 輸入1: (在雙引號之後, 直接將檔案內容複製貼上, 作為輸入內容) \n 請利用 Python 讀取下列檔案名稱為 2b_w12_seat.txt "2b stud num\xa0\xa0 \xa0seat 41123201\xa0\xa0 \xa0 41123202\xa0\xa0 \xa0(3,8) 41123203\xa0\xa0 \xa0(3,7) 41123204\xa0\xa0 \xa0(6,8) ~~~ 中間資料沒有列出來 41136124\xa0\xa0 \xa0(3,2) 41136126\xa0\xa0 \xa0 41136131\xa0\xa0 \xa0" \n ChatGPT 回覆1:  \n 要讀取這個檔案，你可以使用 Python 的檔案處理功能。以下是一個基本的範例程式碼，可以協助你達成這個目標： \n w12_chatgpt_prob1_ans1.py \n 這個程式碼會將學號和座位號的對應關係存儲在一個字典中，然後顯示出來。請注意，這裡使用 strip() 方法來去除空格和換行符號。 請確保你的檔案路徑正確，並注意檔案的編碼，以確保正確讀取中文內容。 \n 討論1: 經執行 ChatGPT 回覆的程式, 已經可以讀取資料, 並且列出資料. 但資料沒有排序. \n 輸入2: \n 假如前面程式中的座位號第一個 index 代表"列"而第二個 index 代表行, 請延續上個程式, 由左到右作為每一列的順序, 而且希望陣列排序是列出該位置上的學員學號 \n ChatGPT 回覆2: \n 了解，如果要按照座位號的列和行來排序並列出每個位置上的學號，我們可以修改程式碼來實現。以下是修改後的程式碼： \n w12_chatgpt_prob1_ans2.py \n 這裡我們使用了 sorted 函數，並通過 key 參數指定排序規則，即按照列和行的順序進行排序。最後，我們顯示排序後的結果，列出每個位置上的學號。 \n 討論2: 經執行 ChatGPT 回覆的程式, 所讀取的資料已經排序. \n \n 輸入3: \n 假如 "2b_w12_seat.txt" 可以從 "https://mde.tw/cadnote/downloads/2b_w12_seat.txt" 這個網址讀取, 而且希望將上一個 Python 程式改用 Brython 編寫, 要如何修改? \n ChatGPT 回覆3: \n Brython 是一個允許在瀏覽器中運行 Python 3 代碼的工具，而在瀏覽器中讀取外部檔案通常會涉及到跨網域 (Cross-Origin) 的問題。為了避免這些問題，我們可以使用 JavaScript 來在瀏覽器中讀取檔案，然後將檔案內容傳遞給 Brython。以下是修改後的 Brython 程式碼： \n (因為我們不使用 ChatGPT 混用 Javascript 與 Brython 的建立, 所以此地 不列出其回覆的原始碼 ) \n 這個 HTML 文件引入了 Brython，然後使用 JavaScript 的 XMLHttpRequest 將檔案內容從指定的 URL 讀取並傳遞給 Brython 的 eval 函數。在 eval 函數中執行 Python 代碼。這樣就可以在瀏覽器中運行 Python 代碼，同時解決了跨網域的問題。請注意，這裡假設檔案是文本格式，如果是二進制檔案，需要進一步處理。 \n 討論3: ChatGPT 建議的程式或許也能達成目的, 但是混用 Javascript 與 Brython 並不是目前所需, 因此不採用. \n \n 輸入4: \n 假如我們已經知道 Brython 可以利用 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).read() 或 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).readlines() 讀取到檔案, 可以將上一個程式全部改用 Brython 完成嗎? \n ChatGPT 回覆4: \n 是的，如果你已經知道 Brython 可以使用 open("https://mde.tw/cadnote/downloads/2b_w12_seat.txt").read() 或 open("https://mde.tw/cadnote/downloads/2b_w12_seat.txt").readlines() 讀取檔案，你可以將上述 Python 程式碼轉換為 Brython 程式碼。以下是修改後的程式碼： \n w12_chatgpt_prob1_ans3_brython.py  (這裡已經配合 cmsite 中的 Brython 環境, 可以 直接從 Gist 取出執行 ) \n 這個 HTML 文件使用 Brython 在瀏覽器中運行 Python 3 代碼。Brython 的 open 函數會模擬 Python 的 open 函數，讓你能夠在瀏覽器中讀取檔案。這樣就可以使用和在 Python 中一樣的方式處理檔案，同時在瀏覽器中運行。 \n 討論4: ChatGPT 因為帶有非常大量的邏輯變數, 因此詢問時若能給予明確指示, 將可能取得更有用的回答. \n 接下來就可以延續上述回覆所得到的程式碼, 加以研究後再修改為其他格式的資料輸出, 例如:  直接在 Brython 執行後, 列出所需要的 html 物件 . \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13-w14', 'text': '利用 ChatGPT 對話所完成的 2a 座位排序程式:  w13_2a_seat.py 執行結果 \n 利用 " sudo update-rc.d stunnel4 defaults " 將 s.cycu.org 中的 stunnel4 設為與系統同步啟動. \n w13_2b_1.mp4  (說明如何利用 ChatGPT 協助利用 Python 程式列出各組學員座位表) \n 接下來請根據下列步驟測試如何在 CoppeliaSim 場景中利用感測器偵測, 並對特定物件施力: \n 第一步: \n 下載支援 IPv6 網路協定版本 \xa0 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z \xa0 (需要下載密碼) \n CoppeliaSim 使用者手冊 , \xa0 CoppeliaSim 4.3.0 使用手冊網站 \n 第二步: \n 與 ChatGPT 對話時, 可以利用\xa0 zmqRemoteAPI Python for cad2023.7z \xa0(需要下載密碼)\xa0中的 ZMQ Remote API Python 程式作為 Template, 探討如何設置感測器, 在正確時間對剛球施力. \n 第三步: \n 實際操作 CoppeliaSim 鋼球永動模擬器電腦輔助設計三個階段: 建立模型零組件 - 轉入機電模擬系統 - 根據實際物理條件設置機電系統.\xa0 perpetual_motion_simulator_project_cad2023.7z 下載 \xa0(需要密碼) \n 請各組學員將上列三個步驟的執行, 以 Wink 操作影片放入個人與分組網站中的 w13 頁面. \n w13_2b_2.mp4  (有關上列操作步驟的說明) \n triangle_solvespace_coppeliasim_ex1.7z  (利用 Solvespace 建立 V 形軌道, 希望建立較簡單的鋼球永動模擬系統) \n w14 \n w14_2b_1.mp4  (說明如何簡化專案一, 讓鋼球直接在兩個三角形斜面上進行永動模擬) \n w14_2b_2.mp4  (延伸三角形斜面對鋼球施力的模式, 套用到 2d 的永動模擬器) \n 專案一 Perpetual Motion Simulator 永動模擬器:  \n cad2023_w14.7z  (需要透過控制系統設計找出能讓鋼球通過感測器時的最佳施力大小) \n project1_w14_simple.7z  (電磁力吸引) \n cad2023_w14_perpetual_motion_simulator_template.py \n \n 設置感測器與 ZMQ remote API python 施力程式後:  triangle_perpetual_motion_simulator.7z \n \n \n 專案二: \n 1d_ball_balancing_get_distance.7z \n \n 參考資料: \n https://wikis.utexas.edu/display/RMD/Home+-+Robot+Mechanisms+Design \xa0 \n 以 API  改變重力 : \n sim.setArrayParameter(sim.arrayparam_gravity,{gx,gy,gz}). \n set initial velocity : \n sim.setObjectFloatParameter(objectHandle,X,y), where X can be sim.shapefloatparam_init_velocity_x, sim.shapefloatparam_init_velocity_y or sim.shapefloatparam_init_velocity_z, and y the initial velocity in that direction \n get object velocity : \n list linearVelocity, list angularVelocity = sim.getObjectVelocity(int objectHandle) \n Reinforcement Learning: \n https://www.coppeliarobotics.com/helpFiles/en/PyRep.htm \n https://github.com/chauby/CoppeliaSimRL \n Deep RL  ( ebook on Springer ) \n https://github.com/moliqingwa/coppeliasim_deeprl', 'tags': '', 'url': 'w13-w14.html'}, {'title': '網路設定', 'text': '由於電腦輔助設計室某部分套件, 在 IPv4 網路環境下會被防毒軟體偵測到封包異常而封閉網路, 因此以下將 IPv4 網路關閉, 僅使用 IPv6, 並透過雙網路協定支援的代理主機設定, 以便與僅支援 IPv4 的網路主機連線. \n 利用隨身碟上的批次檔案進行電腦輔助設計室網路環境設定 ( 設定影片 ): \n 1_cadlab_network_setup.bat \n echo "disable ipv4 and setup proxy for ipv6"\nSET CurrentDir=%~dp0\n%windir%\\system32\\reg.exe import %CurrentDir%1_2023_cadlab_network_setup.reg\npowershell -executionpolicy bypass -File %CurrentDir%1_disable_ipv4.ps1\nexit \n 1_2023_cadlab_network_setup.reg \n 關閉自動搜尋代理主機, 自行設定代理主機外, 對近端與 NAT 內部 IPv4 網址不使用 proxy server, 若 proxy server 採 domain name 設定則當 IPv4 網路協定啟動時, 亦可透過代理主機連線. \n Windows Registry Editor Version 5.00\n\n [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings]\n ; disable AutoDetect\n"AutoDetect"=dword:00000000\n"MigrateProxy"=dword:00000001\n; enable Proxy\n"ProxyEnable"=dword:00000001 \n"ProxyHttp1.1"=dword:00000000 \n"ProxyServer"="http://p4.cycu.org:3128"\n"ProxyOverride"="localhost;192.168.1.0/24;<local>" \n 1_disable_ipv4.ps1 \n 僅啟動 IPv6 網路協定, 且將 dns server 指向 hinet. \n # 關閉 IPv4 網路\nDisable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip\n  \n# 啟用 IPv6 網路\nEnable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6\n  \n# 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet)\n$dnsServers = "2001:b000:168::1", "2001:b000:168::2"\nSet-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers\n\n\n# 設定 IPv6 固定位址 (fixed address), 子網路首碼長度 (subnet prefix) 與網路預設閘道 (gateway) 等三個變數\n$ipv6Address = "2001:288:6004:17:請使用個人所分配到的 IPv6 位址"\n$subnetPrefixLength = 64\n$gateway = "2001:288:6004:17::254"\n \n# 參考 https://serverfault.com/questions/427234/getting-network-interface-device-name-in-powershell\n$query = "SELECT * FROM Win32_NetworkAdapter WHERE Manufacturer != \'Microsoft\' AND NOT PNPDeviceID LIKE \'ROOT\\\\%\'"\n$interfaces = Get-WmiObject -Query $query | Sort index\n$interfaces | ForEach{\n    $friendlyname = $_ | ForEach-Object { $_.NetConnectionID }\n    New-NetIPAddress -AddressFamily "IPv6" -InterfaceAlias $friendlyname -IPAddress $ipv6Address -PrefixLength $subnetPrefixLength -DefaultGateway $gateway\n}\n\n \n# 列出所使用的 IPv6 網路通訊協定內容\nWrite-Host "IPv6 Address: $ipv6Address/$subnetPrefixLength"\nWrite-Host "IPv6 Gateway: $gateway" \n 下載  cad2023_network_setup.7z  (需要下載密碼), 必須以管理者身分執行批次檔案, 因為要藉此身分關閉 IPv4 網路協定. \n 下載  2023_fall_w7_cadlab_network_setup.7z \xa0 (需要下載密碼), 必須先放入個人所分配到的 IPv6 位址後, 以管理者身分執行批次檔案, 就能直接完成電腦輔助設計室中電腦的網路連線設定. \n 各學員所分配的固定 IPv6 位址如下: \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 班級名單序號', 'tags': '', 'url': '網路設定.html'}, {'title': 'exam', 'text': '在系上 IPv6 網段時, 可以在線上考試主機  https://exam.cycu.org  帳號註冊時段 進行註冊 : \n \n 其中: \n username 請填入學號 \n email 請使用學號@nfu.edu.tw \n 選定密碼之前, 請將密碼存入個人手機的備忘錄 \n password 輸入兩次, 至少包含八個數字與英文字母的組合字串 \n name 請輸入中文姓名的名字 \n surname 請輸入中文姓名的姓 \n groups: \n 二甲: cad2023a \n 二乙: cad2023b \n 一甲: cp 2023a \n 一乙: cp2023b \n \n', 'tags': '', 'url': 'exam.html'}, {'title': '任務一', 'text': '\n 2023.09.14 上午 2b 上課時段, 之所以沒有 IPv6 網路連線的原因是:  BGA-0810-S 網管集線器的 port 24 硬體故障 , 無法從工作站室取得機械設計系網路主幹訊號. \n 在 Replit Python 環境中就是內建 Python3, 因此安裝模組必須使用 pip 而非一般 Linux 環境中使用的 pip3: \n 以 import 將倉儲從 github 導入後, 必須使用 git submodule update --init 取下 cmsimde 子模組內容 (因為 Replit import 不會自動取下倉儲對應的子模組). \n 取下子模組之後, 以 Run 嘗試以 Python3 執行 main.py, 讓 Replit 自行調適所需的 Python3 環境, 結果會顯示缺少啟動 cmsimde 網站的模組, 再以下列指令在 Shell 頁面安裝所需模組: \n pip install flask flask_cors bs4 lxml markdown pelican gevent \n 其中 flask 為 Python 網際框架, flask_cors 則允許跨網域擷取資料的 flask 延伸模組, bs4 與 lxml 用於超文件分頁, markdown 與 pelican 則允許使用者採 Markdown 格式編寫網誌內容, 並且利用 Pelican 套件轉為 html 格式的網誌文章. 至於 gevent 則是 Replit 內建使用的同步網路程式庫. \n 手動載下倉儲子模組, 試以 Run 執行之後再安裝 cmsimde 編輯網站所需模組, 應該就可以利用 Run 啟動倉儲對應的動態網站. \n 最後, 為了保全網站登入的管理者密碼編碼, 還需要在 Secrets 頁面中建立 config 變數, 並將近端 config/config 所修改的管理者密碼編碼登錄至 config 變數. \n \n 請自選 CAD 套件, 依照下列圖示, 以能將此系統放在電腦桌上作為參考尺寸, 繪製所需的零組件, 並將各零組件檔案與畫面上傳至個人的 Onedrive, 或以 Onshape 上的公開連結展示所完成的資料. \n 最後在個人的  帳號.github.io/cad2023  網站上呈現任務一所完成的結果 (請以 H1 且標題為任務一建立網頁). \n 有關電腦輔助設計繪圖套件: \n 機械設計工程系所提供的 SolidWorks 與 NX 都必須在啟動時, 透過網路至分別位於校本部與系上的認證主機進行登錄, 才能開啟. 其中 Siemens  NX2027.3401_lite_cad2022.7z  (需要下載密碼) 可以放入隨身碟, 在任一台 Windows 64 位元的電腦上, 連接網路取得認證後開啟. \n Siemens Solid Edge 則提供  Community 版本 , 安裝後無需上網即可使用, 在電腦輔助設計室則可以下載  se_portable_X_for_cad2023.7z  (需要下載密碼), 放入隨身碟後, 先執行所附的系統組態批次檔後, 直接以批次檔案開啟. \n Solvespace  則適合在初步設計階段, 提供尺寸規劃或外型較為簡單的零組件繪製. \n \n 零組件繪圖完成後, 請轉為 STL 格式轉入 CoppeliaSim 進行機電系統模擬. \n 下載  CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需要下載密碼) \n CoppeliaSim 使用者手冊 ,  CoppeliaSim 4.3.0 使用手冊網站 \n References: \n Simulation Tools for Model-Based Robotics: Comparison of Bullet, Havok, MuJoCo, ODE and PhysX \n Tautochrone curve - Wikipedia \xa0 \n rolling-ball.pdf (umbc.edu) \n Modelling of the force state of contact of a ball rolling along the boundaries of two rails \n On the dynamics of a rolling ball actuated by internal point masses \n On the Optimal Control of a Rolling Ball Robot Actuated by Internal Point Masses \n', 'tags': '', 'url': '任務一.html'}, {'title': '磁力吸引', 'text': '有關磁力吸引的鋼球循環運動系統, 請參考 這個影片 .  或者透過課程檔案下載密碼觀看 這個影片 . \n 根據 這個網站 宣稱是此一 Perpetual Motion Simulator 的原始創作者. \n 同時參考\xa0 A perpetual motion machine powered by electromagnetism.pdf  (需要下載密碼) \n 電腦輔助設計與實習課程的任務一即可根據此一裝置的設計, 先採用電腦輔助設計軟體, 繪製系統所需的 3D 零組件, 然後轉為 STL 格式, import 進入 CoppeliaSim, 接著根據影片說明, 利用近接感測器(例如:  電感式近接開關 ,  Inductive proximity sensor ) 控制電磁鐵開關, 設法透過磁力吸引讓鋼球具有足夠動能返回圓形平台. \n 有關利用 Arduino 控制卡與相關電路設計產生電磁力控制的模擬, 請參考  PICSimLab  頁面中的說明. \n 一旦完成 CoppeliaSim 與 Arduino 電路設計等機電資系統整合模擬, 就可以進一步利用 3D printer 列印出所需零組件, 結合實體電路設計完成此一系統的虛實整合. \n 機電模擬系統: \n 下載支援 IPv6 網路協定版本  CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需要下載密碼) \n CoppeliaSim 使用者手冊 ,  CoppeliaSim 4.3.0 使用手冊網站 \n 模擬磁力的 討論 ,  1 ,  2 \n Force Control Modeling \n simpleMagnetDemo.ttt \n 模擬原理: \n Perpetual Motion Simulator 主要的電路設計包含右側軌道下方的電磁鐵, 通電後可產生一定大小的磁吸力, 當圓形鐵球循著軌道由平台孔洞往下滾動, 經過軌道下方近接感測器 (Proximity sensor) 時 (距離 3mm-5mm), 透過感應, 控制電路將會短暫啟動電磁鐵 (10 miliseconds), 促使圓形鐵球加速滾動, 其磁力大小約略與圓形鐵球距離的平方成反比 ( Computational Electromagnetics ,  磁場模擬 ). \n 因此圓形鐵球除了從平台高度落下時, 將位能轉換為動能外, 與軌道滾動磨擦以及空氣阻力所損耗的運動能, 將額外由電磁鐵開關間所得到的磁力吸引能量進行加速, 以便取得足夠的動能在脫離軌道末端後, 重新回到圓形平台. \n \n (image from  here ) \n 電磁力未啟動下的 perpetual motion simulator CoppeliaSim 場景模擬: \n \n Images and part files in Onshape  (STL file import into CoppeliaSim 尺寸由 mm 放大10 倍至 cm, 且 z 軸向上, 場景中圓球直徑為 12.825 cm, 平台圓孔直徑為 20 cm) \n \n Perpetual Motion Simulator in Onshape , 轉入 CoppeliaSim 後放大 10 倍, 且 z 軸向上之模擬場景, 下載  perpetual motion simulator stage2.7z  (需要下載密碼) \n 有關如何在 Onshape 繪製零組件, 轉出 STL 檔案, 轉入 CoppeliaSim 並進行組件 divide and group, 請參考這個 教學影片 . \n 以下 Python 程式可在 CoppeliaSim 場景檔案中建立所需的模擬組件: \n 啟動  CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (支援 IPv6 網路協定版本, 需要下載密碼), 然後在  Portable_2023_fall_1.3g_5g.7z  (需要下載密碼) 可攜環境啟動後, 以 pip install pyzmq cbor keyboard 安裝所需模組, 然後執行下列 zmqRemoteAPI IPv6 程式, 將滑鼠在場景中點擊後, 按下 q 鍵即可終止場景模擬: \n # zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容\n# pip install pyzmq cbor keyboard\nfrom zmqRemoteApi_IPv6 import RemoteAPIClient\nimport time\nimport math\nimport keyboard\n\n# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線\nclient = RemoteAPIClient(\'localhost\', 23000)\n# 以 getObject 方法取得場景物件\nsim = client.getObject(\'sim\')\nbox = sim.getObject(\'/box\')\n\n# 啟動模擬\nsim.startSimulation()\n# 建立尺寸數列, 分別定義 x, y, z 方向尺寸\nx = 0.2\ny = 0.2\nz = 0.1\nsize = [x, y, z]\n\n# 利用 size 數列, 建立圓柱物件, 2 代表 cylinder\n# 8 表示 respondable, 1 為 質量\ndigit1_handle = sim.createPureShape(2, 8, size, 1, None)\n# 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤\n# 之後可再導入帶有數字組立的外型零件\nsim.setObjectAlias(digit1_handle, \'digit1\')\n# 轉角單位為徑度\nsim.setObjectOrientation(digit1_handle, -1, [0, math.pi/2, 0])\n# 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度\nsim.setObjectPosition(digit1_handle, -1, [0, 0, x/2])\n\n# 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity\njoint1_handle = sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic, 0, None)\nsim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity)\nsim.setObjectAlias(joint1_handle, \'joint1\')\n\n# 取得 cylinder 的位置座標\ndigit1_pos = sim.getObjectPosition(digit1_handle, -1)\njoint1_pos = [digit1_pos[0], digit1_pos[1], digit1_pos[2]]\n\n# 將 joint1 至於 cylinder 中心\nsim.setObjectPosition(joint1_handle, -1, joint1_pos)\n# 取得 digit1_handle 的方位\ndigit1_ori = sim.getObjectOrientation(digit1_handle, -1)\n# 將 joint1_handle 方位與 digit1 對齊\nsim.setObjectOrientation(joint1_handle, -1, digit1_ori)\n\n# 將 joint1 置於 box 上\nsim.setObjectParent(joint1_handle, box, True)\n# 將 cylinder 置於 joint1 上\nsim.setObjectParent(digit1_handle, joint1_handle, True)\n\n# 鎖定 joint1\nsim.setJointForce(joint1_handle, float(\'inf\'))\n\nprint("基本場景建立完成!")\n\n# 設定主迴圈\nwhile True:\n    # 設定 joint1 目標速度\n    sim.setJointTargetVelocity(joint1_handle, 10)\n    # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉\n    time.sleep(0.01) \n\n    if keyboard.is_pressed(\'q\'):\n        # 可以按下 q 鍵跳出重複執行迴圈\n        break\n\n# 終止模擬\nsim.stopSimulation() \n 下載  zmqRemoteAPI Python for cad2023.7z  (需要下載密碼) \n 在  simpleMagnetDemo.ttt  中利用 Lua 以 proximity sensor 感測與物體的距離後, 產生電磁吸引力的範例程式: \n function sysCall_init()\n     -- 初始化 callback 函數，在模擬開始時執行\n     sensor = sim.getObject(\'./sensor\')\n     -- 取得命名為 \'sensor\' 的物件 handle。 此處使用 proximity 感測器，用於檢測物體之間的距離\n     shape = sim.getObject(\'.\')\n     -- 取得目前 script 所依附的物件 handle，即包含此 script 的物件 handle\n     sim.setObjectInt32Param(shape, sim.shapeintparam_static, 0)\n     -- 將物體設定為非靜態，讓其在模擬中發生動態運動\n     nominalForce = 0.001\n     -- 設定電磁吸引力的標準值\n     enabled = true\n     -- 啟用電磁吸引力\n     previousPos = sim.getObjectPosition(shape, sim.handle_world)\n     -- 取得物體的初始位置並儲存在 previousPos 變數中，用於偵測物體是否移動\nend\n\nfunction sysCall_actuation()\n     -- 驅動 callback 函數，在每個模擬步驟中執行\n     if enabled then\n         -- 如果啟用電磁吸引力，執行下列程式碼\n         local r, dist, pt, obj = sim.handleProximitySensor(sensor)\n         -- 使用 proximity 感測器偵測物體是否接近\n         if r > 0 then\n             -- 如果偵測到物體\n             dist = dist + 0.02\n             -- 增加一個 offset，以避免物體接觸時產生無限大的吸引力\n             local force = nominalForce / (dist * dist)\n             -- 計算吸引力的大小，與距離的平方成反比\n             local m = sim.getObjectMatrix(shape, sim.handle_world)\n             m[4] = 0\n             m[8] = 0\n             m[12] = 0\n             -- 取得物體的轉換矩陣，不考慮平移部分\n             local forceVector = sim.multiplyVector(m, {0, 0, force})\n             -- 將力向量從局部座標系轉換為絕對座標系\n             sim.addForceAndTorque(shape, forceVector, {0, 0, 0})\n             -- 將計算得到的力應用於物體的質心，持續一個 time step\n             if notFirstPass then\n                 local p = sim.getObjectPosition(shape, sim.handle_world)\n                 local dx = {p[1] - previousPos[1], p[2] - previousPos[2], p[3] - previousPos[3]}\n                 local d = math.sqrt(dx[1] * dx[1] + dx[2] * dx[2] + dx[3] * dx[3])\n                 -- 計算物體是否移動\n                 if d < 0.0001 then\n                     sim.setObjectInt32Param(shape, sim.shapeintparam_static, 1)\n                     sim.resetDynamicObject(shape)\n                     enabled = false\n                     -- 如果物體沒有移動，將其設為靜態\n                 end\n                 previousPos = p\n             end\n         end\n     end\n     notFirstPass = true\nend \n \n', 'tags': '', 'url': '磁力吸引.html'}, {'title': 'magnet', 'text': '利用 Lua 模擬磁力的程式碼: \n function sysCall_init()\n\n-- This line defines the beginning of a function called sysCall_init(). This function is a special callback function in CoppeliaSim that gets called once when the simulation starts.\n\n    sensor = sim.getObject(\'./sensor\')\n\n-- In this line, the script is getting a reference to an object named "sensor" in the simulation scene. This object is expected to exist within the same hierarchy as the script.\n\n    shape = sim.getObject(\'.\')\n\n-- Here, the script is getting a reference to the object where the script is attached. The dot . represents the current object.\n\n    sim.setObjectInt32Param(shape, sim.shapeintparam_static, 0)\n\n-- This line is setting an integer parameter for the "shape" object. Specifically, it\'s setting the sim.shapeintparam_static parameter to 0. This means that the "shape" object is initially not considered as a static object.\n\n    nominalForce = 0.001\n\n-- This line sets a variable nominalForce to a value of 0.001. It appears to represent a constant force value used in the script.\n\n    enabled = true\n\n-- This line initializes a boolean variable enabled to true. This variable seems to control whether the script should apply forces or not.\n\n    previousPos = sim.getObjectPosition(shape, sim.handle_world)\n\n-- Here, the script is getting the initial position of the "shape" object in the world coordinate system and storing it in the previousPos variable. This will be used later for checking if the object has moved.\n\n-- The sysCall_init function sets up initial parameters and conditions for the script. It\'s executed once at the beginning of the simulation.\n\n-- Now, let\'s move on to the sysCall_actuation function:\n\nfunction sysCall_actuation()\n\n-- This line defines the beginning of another special callback function in CoppeliaSim called sysCall_actuation(). This function gets called repeatedly during the simulation to perform actions in each time step.\n\n    if enabled then\n\n-- This line checks if the enabled variable is true. If it\'s true, it means the script should apply forces. If it\'s false, the script won\'t apply any forces.\n\n        local r, dist, pt, obj = sim.handleProximitySensor(sensor)\n\n-- Here, the script is using the sim.handleProximitySensor function to check if the proximity sensor (defined earlier as "sensor") is detecting any objects nearby. It returns information about the detected object.\n\n        if r > 0 then\n\n-- This line checks if r (the return value of the proximity sensor function) is greater than 0. If it is, it means the sensor has detected an object nearby.\n\n            dist = dist + 0.02\n\n-- This line adds an offset of 0.02 to the dist variable. This offset is added to prevent an infinite force when objects are in direct contact. It\'s a safety measure.\n\n            local force = nominalForce / (dist * dist)\n\n-- Here, the script calculates the force to be applied based on the nominalForce and the squared distance (dist) between the object and the detected object. This seems to be a simple inverse square law force calculation.\n\n            local m = sim.getObjectMatrix(shape, sim.handle_world)\n            m[4] = 0\n            m[8] = 0\n            m[12] = 0\n\n-- These lines retrieve the transformation matrix (m) of the "shape" object with respect to the world coordinate system and set its translational components to 0. This effectively extracts the rotational part of the transformation matrix.\n\n            local forceVector = sim.multiplyVector(m, {0, 0, force})\n\n-- This line multiplies the modified transformation matrix m by a force vector {0, 0, force} to obtain a force vector in absolute world coordinates.\n\n            sim.addForceAndTorque(shape, forceVector, {0, 0, 0})\n\n-- Here, the script applies the computed forceVector to the "shape" object using sim.addForceAndTorque. This function applies the force to the center of mass of the object for one simulation time step.\n\n            if notFirstPass then\n\n-- This line checks if the notFirstPass variable is true. It\'s used to ensure that this part of the script is executed after the first simulation step.\n\n                local p = sim.getObjectPosition(shape, sim.handle_world)\n\n-- Here, the script is getting the current position of the "shape" object in the world coordinate system.\n\n                local dx = {p[1] - previousPos[1], p[2] - previousPos[2], p[3] - previousPos[3]}\n\n-- This line calculates the difference in position (dx) between the current position (p) and the previous position (previousPos) of the object in world coordinates.\n\n                local d = math.sqrt(dx[1] * dx[1] + dx[2] * dx[2] + dx[3] * dx[3])\n\n-- The script calculates the Euclidean distance d based on the differences in position components dx. This distance is used to check if the object has moved significantly.\n\n                if d < 0.0001 then\n\n-- This line checks if the object has moved by comparing d to a small threshold value (0.0001). If d is less than the threshold, it means the object hasn\'t moved significantly.\n\n                    sim.setObjectInt32Param(shape, sim.shapeintparam_static, 1)\n\n-- If the object hasn\'t moved significantly, this line sets the sim.shapeintparam_static parameter to 1, making the object static in the simulation.\n\n                    sim.resetDynamicObject(shape)\n\n-- This line resets the dynamics of the object. It might be necessary to reset the object\'s dynamics after making it static to avoid any issues.\n\n                    enabled = false\n\n-- Finally, this line sets the enabled variable to false, which will prevent the script from applying further forces since the object is now considered static and not moving.\n\n                end\n\n-- The if block is closed.\n\n                previousPos = p\n\n-- Regardless of whether the object has become static or not, the previousPos variable is updated with the current position for use in the next iteration of the sysCall_actuation function.\n\n            end\n\n-- The if notFirstPass block is closed.\n\n        end\n\n-- The if r > 0 block is closed.\n\n    end\n\n-- The if enabled block is closed.\n\n    notFirstPass = true\n\n-- This line sets the notFirstPass variable to `true \n \n', 'tags': '', 'url': 'magnet.html'}, {'title': '馬達推動', 'text': '除了利用磁力吸引, 讓鋼球在軌道運動時能具備足夠動能返回圓形平台外, 另外一種設計是在鋼球 (或其他非鐵材質的圓球) 離開圓形平台孔洞之後, 設法利用隱藏式的馬達帶動機構, 以滾動方式加速圓球, 以便讓圓球返回平台. \n 有關馬達推動設計, 請參考:  https://www.instructables.com/Marblevator-Perpetual/  或 這個影片 . \n 機電模擬系統: \n 下載  CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需要下載密碼) \n CoppeliaSim 使用者手冊 ,  CoppeliaSim 4.3.0 使用手冊網站 \n', 'tags': '', 'url': '馬達推動.html'}, {'title': 'Replit', 'text': '使用 Replit 維護 cmsimde 網站內容時, 可以利用  secrets 環境變數  Tool 保全免費 Replit 帳號 (只能建立完全公開的 Repls) 下的管理者密碼編碼字串. \n \n Replit Documentation:\xa0 https://docs.replit.com/ \xa0 \n Intro to Replit \n 從 Github 將倉儲導入 Replit 的手冊:\xa0 https://docs.replit.com/category/using-git-on-replit \xa0 \n \n 利用 Replit 維護 Github 倉儲網站的步驟 ( 操作說明 ): \n \n Connect Github to Replit  (目的在讓導入 Replit 的倉儲具有推回 (git push) Github 對應帳號的權限) \n Import repository to Replit  (選擇倉儲所使用的程式 Python 語言, 可以直接在 Replit 執行網頁編輯程式) \n 手動取下與倉儲對應的子模組: git submodule update --init --recursive (假如連主倉儲內容與子模組全部手動取下資料, 則可使用 git clone --recurse-submodules 然後接 https 或 SSH 倉儲網址) \n Run Github repository on Replit  (由於從 Github 導入 Replit, 並沒有倉儲子模組的內容必須手動導入, 且以 pip 安裝執行 cmsimde 網頁編輯程式所需的模組, 其中包括 flask flask_cors bs4 lxml markdown pelican gevent 等) \n 以 Run 執行動態網站, 以編輯表單中的 config 設定管理者密碼後, 將 config/config 編碼字串移至 secrets 工具中的 config 變數, 然後刪除倉儲中的 config/config 檔案, 以 Stop 關閉動態網站後, 重新以 Run 執行動態網站, 測試是否可以採新修改的管理者密碼登入動態網站. \n 利用 cmsimde 動態網站功能修改內容後, 以 Convert 將資料轉為靜態網頁後, 回到 Replit 以 Git 工具進行內容的新增、提交與推送至對應的 Github 倉儲. \n \n \n 2023.09.15 下午 2a 上課時所使用的  cmsite 版本 , 其中的 .replit 與 Replit.nix 必須移除才能使用最新版本的 Python, 因此若當時已經採用作為 Template 的倉儲必須進行修改或重新建立. \n 另外, 一個 Replit 免費帳號只能與一個 Github 帳號綁定. 以下說明將利用 scrum2 At mde dot tw 對應的 Gmail 登入 Replit 後, 其帳號設定為 scrum2, 並與 Github 帳號 scrum-2 進行綁定. \n \n Repl 為 Replit 網際服務系統中的專案, 一旦選定對應 Language, 當專案以 Run 執行時, 系統將會試著安裝所需模組, 只是 Replit import from Github 並不會取下子模組, 使用者必須自行以 git 指令取得子模組內容. \n Replit 專案的設定檔案位於 .replit 與 Replit.nix 等兩個檔案. \n 希望利用 Replit (Web-based IDE, Integrated Development Environment) 來維護個人網站. \n 將倉儲 Import 至 Replit, 在 Replit 啟動 cmsimde 網站進行內容編輯之後, 轉為靜態, git commit and git push. \n 導入畫面中選擇以 Python 作為專案程式語言, 如下圖所示, 導入 scrum-2/scrum-2.github.io 倉儲. \n \n 將 scrum-2.github.io 倉儲導入 Replit 之後, 必須手動取下倉儲對應的子模組 (因為 Replit 的 import 功能並不會自動將倉儲所屬的子模組導入). \n 在既有倉儲所處的電腦中導入子模組的指令為: \n git submodule update --init \n 假如所要取下的倉儲子模組其下還有子模組, 則使用: \n git submodule update --init --recursive \n 假如在 Windows 命令列或 Linux Shell 中直接利用 git clone 取下主倉儲與子模組資料, 則使用: \n git clone --recurse-submodules 然後接倉儲的 https 或 SSH 網址 (Github 已經從網站拿掉 SSH 協定語法). SSH 為 Secure SHell 的簡寫, 可在不安全的網路中為網路服務提供安全的傳輸環境. \n 使用倉儲的 https 網址進行 git clone, 隨後若要改版後 git push, 則需在 .git/config 中納入權限 token. 若使用倉儲的 SSH 網址進行 git clone, 在 Windows 可以利用 Putty 建立權限對應 session (必要條件為 GIT_SSH 環境變數必須指向 putty\\plink.exe), 其中包含連線網址 (也就是 github.com), 是否使用 Proxy server 設定 (因為牽涉 IPv4 與 IPv6 網路間的資料傳送), 以及 SSH 連線協定所使用的 private key 位置等. 若 SSH 協定 session 名稱為 my_session, 則利用 SSH 取下 Github 倉儲的指令為: \n git clone --recurse-submodules  git@my_session:帳號/倉儲.git \n 此一指令代表是採用 SSH 協定, 以 git 作為帳號, 遠端登入到 github.com 伺服器後, 指定要取下 Github 系統中, 對應"帳號"下的"倉儲". 而進行此一指令之前, 必須將 my_session 對應 private key (若使用 Putty, 則格式為 .ppk) 的 public key 送到 "Github SSH and GPG keys" 設定區 (必須使用 OpenSSH 格式). \n git submodule update 指令必須在 Replit 的 Shell tool 頁面中執行. 之後再以 pip install flask flask_cors bs4 lxml markdown pelican gevent 安裝所需模組. \n 當 .replit 中設定 run = "python3 main.py" 之後, 使用者就可以點擊 Run 按鈕執行 main.py \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'coppeliasim', 'text': '原始碼: \n https://github.com/CoppeliaRobotics \xa0 \n 核心程式庫:  https://github.com/CoppeliaRobotics/CoppeliaSimLib \n 採商業與教育版授權原始碼: \n https://github.com/CoppeliaRobotics/simGeom \n https://github.com/CoppeliaRobotics/simIK \n https://github.com/CoppeliaRobotics/coppeliaGeometricRoutines \n https://github.com/CoppeliaRobotics/coppeliaKinematicsRoutines \n 範例場景:  https://github.com/CoppeliaRobotics/scenes \n 範例模型:  https://github.com/CoppeliaRobotics/models \n 使用者手冊: \n https://www.coppeliarobotics.com/helpFiles/index.html  (以 Google  翻譯為中文 ) \n https://mde.tw/pjcopsim  ( 倉儲 ,  開發專案說明 ) \n ZeroMQ Remote API: \n https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm \n Stepped mode:  https://www.coppeliarobotics.com/helpFiles/en/simulation.htm#stepped \n Reference: \n http://wcm.cycu.org:88/github/cd2021/content/V-rep.html  (只能在系上 IPv6 網段中連結) \n 利用 Leo Editor 解讀 CoppeliaSim 完整的 XML 檔案格式,  Leo Editor Google Group \n 因為 Python 3.12.0 環境下 Leo Editor 還無法正常透過 pip 安裝, 因此必須手動安裝 PyQt5 之後, 再使用 pip install leo, 所完成的 Python 3.12.0:\xa0 Python312_leo_664_PyQt5.7z  (需要下載密碼) \n', 'tags': '', 'url': 'coppeliasim.html'}, {'title': 'zmq remoteapi', 'text': 'https://github.com/samuel-cavalcanti/rust_zmqRemoteApi   \n', 'tags': '', 'url': 'zmq remoteapi.html'}, {'title': '近端可攜', 'text': '下載可攜程式套件: \n basic_portable_python.7z  (下載 15MB, 解開後 55MB, 只有 CPython 官方基本的解譯系統) \n 下載  Portable_2023_fall_1.3g_5g.7z  (維護 Github 倉儲與解譯 Python 程式用, 需要下載密碼) \n 下載  msys64_20230718_cmake.7z  (編譯 Solvespace 與 CoppeliaSim 用, 需要下載密碼) \n 也可以直接使用電腦輔助設計室中 C:\\Portable_2023_fall 目錄中的檔案 \n 近端電腦、Replit、自架 Linux 伺服器與 Github 之間的關聯: \n 近端電腦: \n 啟動可攜程式系統執行 Python 程式, 編輯取自 Github 的動態與靜態網站內容 \n 可利用 CAD 套件的 API 延伸系統, 變更零組件的參數尺寸 \n 可操控 CoppeliaSim 模擬系統中的機電系統 \n Replit: \n 可執行 Python 程式, 編輯取自 Github 的動態與靜態網站內容 \n 自架 Linux 伺服器: \n 可執行 Python 程式, 編輯取自 Github 的動態與靜態網站內容 \n Github: \n 利用倉儲建立個人網站與課程作業網站 \n 將程式碼與文字檔案儲存在個人帳號下的 Gist 區域', 'tags': '', 'url': '近端可攜.html'}, {'title': 'Git', 'text': 'Git 電子書: \n https://git-scm.com/book/en/v2 \n 簡體字版的  Git 教程 \n 整理下列資料: \n Git 基礎介紹 \n Git 實用攻略 \n Git 版本控制 \n 除了 Github 常見的全球資訊網路上的 Git 協同服務還有  Gitlab ,  Bitbucket ,  SourceForge  等. \n Reference: \n Gitlab 上的舊倉儲:  https://gitlab.com/mdecourse \n \n \n \n', 'tags': '', 'url': 'Git.html'}, {'title': 'Copsim', 'text': "CoppeliaSim 4.5.1 for IPv6: \n 下載  CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需要下載密碼) \n 下載  zmqRemoteAPI Python for cad2023.7z  (需要下載密碼) \n addOns\\simAddOnZMQ remote API server.lua 對原版的修改: \n 讓 zmqRemoteApi server 開啟 CoppeliaSim 時即啟動. \n function zmqRemoteApi.verbose()\n    -- return sim.getNamedInt32Param('zmqRemoteApi.verbose') or 0\n\t-- autoStart\n\treturn sim.getNamedInt32Param('zmqRemoteApi.verbose') or 1\nend \n 讓 zmqRemoteApi server 支援 IPv6. \n function sysCall_init()\n    if not simZMQ then\n        sim.addLog(sim.verbosity_errors,'zmqRemoteApi: the ZMQ plugin is not available')\n        return {cmd='cleanup'}\n    end\n    simZMQ.__raiseErrors(true) -- so we don't need to check retval with every call\n    rpcPort=sim.getNamedInt32Param('zmqRemoteApi.rpcPort') or 23000\n    cntPort=sim.getNamedInt32Param('zmqRemoteApi.cntPort') or (rpcPort+1)\n    maxTimeSlot=sim.getNamedFloatParam('zmqRemoteApi.maxTimeSlot') or 0.005\n    if zmqRemoteApi.verbose()>0 then\n        sim.addLog(sim.verbosity_scriptinfos,string.format('ZeroMQ Remote API server starting (rpcPort=%d, cntPort=%d)...',rpcPort,cntPort))\n    end\n    -- cbor=require 'cbor' -- encodes strings as buffers, always. DO NOT USE!!\n    cbor=require'org.conman.cbor'\n    context=simZMQ.ctx_new()\n    rpcSocket=simZMQ.socket(context,simZMQ.REP)\n\t-- enable IPv6 for ZMQ, default is false to IPv6\n\tsimZMQ.setsockopt(rpcSocket,simZMQ.IPV6,sim.packUInt32Table{1})\n\t-- ZMQ IPv4ONLY default is true: http://api.zeromq.org/4-2:zmq-setsockopt\n\tsimZMQ.setsockopt(rpcSocket,simZMQ.IPV4ONLY,sim.packUInt32Table{0})\n\t--simZMQ.bind(rpcSocket,string.format('tcp://[%s]:%d', '*', rpcPort))\n\t-- original IPv4 setup\n    simZMQ.bind(rpcSocket,string.format('tcp://*:%d',rpcPort))\n    cntSocket=simZMQ.socket(context,simZMQ.PUB)\n    simZMQ.setsockopt(cntSocket,simZMQ.CONFLATE,sim.packUInt32Table{1})\n    simZMQ.bind(cntSocket,string.format('tcp://*:%d',cntPort))\n    if zmqRemoteApi.verbose()>0 then\n        sim.addLog(sim.verbosity_scriptinfos,'ZeroMQ Remote API server started')\n    end\n    simulationTimeStepCount=0\n    steppingClients={}\n    steppedClients={}\nend \n addOns\\simAddOnWS remote API server.lua 檔案的修改: \n 讓 WebSocket server 在 CoppeliaSim 開啟時即啟動. \n function wsRemoteApi.verbose()\n    -- return sim.getNamedInt32Param('wsRemoteApi.verbose') or 0\n\t-- autoStart\n\treturn sim.getNamedInt32Param('wsRemoteApi.verbose') or 1\nend \n addOns\\simAddOnVisualization stream.lua 檔案的修改: \n 讓 Virtualization Stream server 在 CoppeliaSim 開啟時即啟動: \n function sysCall_info()\n    autoStart=sim.getNamedBoolParam('visualizationStream.autoStart')\n    if autoStart==nil then autoStart=true end\n    return {autoStart=autoStart,menu='Connectivity\\nVisualization stream'}\nend \n \n", 'tags': '', 'url': 'Copsim.html'}, {'title': '課程評分', 'text': '課程評分: \n 線上測驗、期中網站與簡報、期末網站與簡報. \n 線上測驗: \n 建立帳號後 ( 請將密碼寫入手機的備忘錄 ), 每週不定時進行. \n 期中網站評分與簡報: \n 期中考前兩週開始進行. \n 期末網站評分與簡報: \n 期末考前兩週開始進行. \n 期中成績計算: \n 期中考與之前各週線上測驗成績平均 \n 學期成績計算: \n (期中成績與之後各週線上測驗成績平均)*60%+(期中網站與簡報成績)*20%+(期末網站與簡報成績)*20% \n', 'tags': '', 'url': '課程評分.html'}, {'title': '課堂考試', 'text': 'w12 開始將在各班上課時段驗證各學員的下列操作項目, 每一位學員必須在現場利用 Wink 建立操作過程影片, 並逐頁加上說明, 推向個人的 Github Pages 網站後, 才算完成. \n 操作項目, 以下操作請以 H1 格式頁面標題為  w12  建立, 抄錄題目內容後, 各項目分別以 H2 格式頁面進行排列: \n \n (標題為" 網路設定 ") - 在電腦輔助設計室中使用 Windows 11 電腦, 該如何進行網路設定, 以便能夠同時對 Github 與 s.cycu.org 上的個人與分組倉儲進行改版? 請取各階段操作畫面並加上說明後, 製作為示範影片放入標題為"網路設定"的頁面中. \n (標題為" 零組件繪圖 ") - 利用各學員被該組指定的 CAD (包括 Onshape、Solid Edge、SolidWorks、NX、Inventor 與 Fusion 360), 以 Wink 擷取各套件的登入、安裝、開啟、零件繪圖、組件繪圖以及轉出 STL 零組件檔案過程, 拍攝為導引說明影片後, 放入個人 Github Pages 網站中的"零組件繪圖"頁面中. \n (標題為" 系統模擬 ") - 請將專案一的零組件轉入 CoppeliaSim 後, 根據鋼球從圓形平台落下後隨著軌道滑行的操作過程, 各頁加入說明後製作成示範影片, 並放入"系統模擬"頁面中. \n', 'tags': '', 'url': '課堂考試.html'}, {'title': '課程主題', 'text': '\n 設計繪圖 \n 系統模擬 \n 課程總結 \n \n 設計繪圖 \n 套件選擇與轉檔 \n STL \n Part split \n SolidWorks \n Solid Edge (可攜) \n NX (可攜) \n Onshape (線上) \n Solvespace (可攜) \n 系統模擬 \n 控制系統設計與模擬 \n PID 控制 \n Coppeliasim \n Lua \n Python ZeroMQ remote API \n Webots \n VRML and X3D \n C++ \n Python \n 課程總結流程 \n mp4 簡報 \n pdf 報告', 'tags': '', 'url': '課程主題.html'}, {'title': '設計繪圖', 'text': 'Loop the loop \n 循環繞圈運動系統: \n 設計一組機電模擬系統, 可以讓鋼球在以下圖示的圓盤孔洞落下後, 沿著軌道運動並回到圓盤上, 以進行重複循環繞圈運動. \n \n Ball balancing \n 鋼球平衡台模擬系統: \n 設計一組如下圖所示之機電整合模擬系統, 可以讓鋼球停在平台上使用者所指定的位置. \n \n ( above image file source ) -  download courseware.zip  (or from  @nfu onedrive ) \n Virtual pinball \n 虛實整合彈珠台機電系統: \n 設計一組如下圖所示的虛實整合彈珠台, 使用實體按鈕 (電腦鍵盤按鈕或 Arduino based 硬體) 結合網際 Coppeliasim 模擬環境建立. \n \n ( above image file source ) \n', 'tags': '', 'url': '設計繪圖.html'}, {'title': '系統模擬', 'text': 'Loop the loop \n 循環繞圈運動系統: \n 設計一組機電模擬系統, 可以讓鋼球在以下圖示的圓盤孔洞落下後, 沿著軌道運動並回到圓盤上, 以進行重複循環繞圈運動. \n \n \n ( file source ) \n References: \n https://physics.stackexchange.com/questions/708154/fake-perpetual-motion-device-using-an-electromagnet \n https://www.researchgate.net/publication/360529167_A_%27perpetual_motion_machine%27_powered_by_electromagnetism \n https://physics.stackexchange.com/questions/188208/why-doesnt-this-magnetic-perpetual-motion-machine-work \n homework and exercises - Tricky conceptual question: ball sliding and rolling down incline - Physics Stack Exchange \xa0 \n classical mechanics - Will a ball slide down a lumpy hill over the same path it rolls down the hill? - Physics Stack Exchange \n https://youtu.be/V70w3cxDJIM \n https://youtu.be/KzUVJiyzQwg \n CTM Example: Ball & Beam Modeling (unisi.it) \n 9.6: Rolling Motion - Physics LibreTexts \n 5.8: Rolling and Slipping Motion - Physics LibreTexts \n newtonian mechanics - How can a marble on a circular track return to its point of origin using only its own momentum? - Physics Stack Exchange \n Explaining Mechanics with a Marble run - Maths Careers \n Marble Roller Coaster: Converting Potential Energy to Kinetic Energy | Science Project (sciencebuddies.org) \n 12. ROLLING, TORQUE AND ANGULAR MOMENTUM (rochester.edu) \n Ball balancing \n 鋼球平衡台模擬系統: \n 設計一組如下圖所示之機電整合模擬系統, 可以讓鋼球停在平台上使用者所指定的位置. \n \n ( above image file source ) -  download courseware.zip  (or from  @nfu onedrive ) \n 後續協同應用: 虛實整合網際 Tilt Maze Game，\xa0 https://craigpickard.com/tilt-2014 ，Tilt Maze App， https://youtube.com/shorts/HiWKgF6PBco ，Reinforcement learning Tilt Maze platform system \n Virtual pinball \n 虛實整合彈珠台機電系統: \n 設計一組如下圖所示的虛實整合彈珠台, 使用實體按鈕 (電腦鍵盤按鈕或 Arduino based 硬體) 結合網際 Coppeliasim 模擬環境建立. \n \n ( above image file source ) \n', 'tags': '', 'url': '系統模擬.html'}, {'title': '課程總結', 'text': '3. 課程總結 \n 錄製簡報影片 \n mp4 \n 編寫總結報告 \n pdf \n 將課程摘要納入個人領英 \n https://www.linkedin.com/ \n', 'tags': '', 'url': '課程總結.html'}, {'title': 'QandA', 'text': '\n', 'tags': '', 'url': 'QandA.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};